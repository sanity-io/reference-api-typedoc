{
	"schemaVersion": "2.0",
	"id": 0,
	"name": "React SDK",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 5,
			"name": "exports",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 223,
					"name": "DocumentsOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configuration options for the useDocuments hook"
							}
						],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 225,
							"name": "batchSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Number of items to load per batch (defaults to 25)"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 35,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L35"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 233,
							"name": "cache",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2355,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.cache"
							}
						},
						{
							"id": 234,
							"name": "cacheMode",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When set to "
									},
									{
										"kind": "code",
										"text": "`noStale`"
									},
									{
										"kind": "text",
										"text": ", APICDN will not return a cached response if the content is stale.\nTradeoff between latency and freshness of content.\n\nOnly to be used with live content queries and when useCdn is true."
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2364,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "noStale"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.cacheMode"
							}
						},
						{
							"id": 235,
							"name": "dataset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L16"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.dataset"
							}
						},
						{
							"id": 224,
							"name": "filter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "GROQ filter expression to apply to the query"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 31,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L31"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 229,
							"name": "next",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2356,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.next"
							}
						},
						{
							"id": 226,
							"name": "orderings",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sorting configuration for the results"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 39,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L39"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 386,
									"name": "SortOrderingItem",
									"package": "@sanity/types"
								}
							}
						},
						{
							"id": 228,
							"name": "params",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/query/queryStore.ts",
									"line": 56,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/query/queryStore.ts#L56"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.params"
							}
						},
						{
							"id": 231,
							"name": "perspective",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2350,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/client",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "ClientPerspective"
								},
								"name": "ClientPerspective",
								"package": "@sanity/client"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.perspective"
							}
						},
						{
							"id": 236,
							"name": "projectId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.projectId"
							}
						},
						{
							"id": 227,
							"name": "search",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text search query to filter results"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 43,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L43"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 232,
							"name": "tag",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2327,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.tag"
							}
						},
						{
							"id": 230,
							"name": "useCdn",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2353,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.useCdn"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								225,
								233,
								234,
								235,
								224,
								229,
								226,
								228,
								231,
								236,
								227,
								232,
								230
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
							"line": 27,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L27"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@sanity/sdk",
								"packagePath": "src/query/queryStore.ts",
								"qualifiedName": "QueryOptions"
							},
							"name": "QueryOptions",
							"package": "@sanity/sdk"
						}
					]
				},
				{
					"id": 237,
					"name": "DocumentsResponse",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Return value from the useDocuments hook"
							}
						],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 240,
							"name": "count",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Total count of items matching the query"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 64,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L64"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 238,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Array of document handles for the current batch"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 56,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L56"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"packageName": "@sanity/sdk",
										"packagePath": "src/config/sanityConfig.ts",
										"qualifiedName": "DocumentHandle"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"packageName": "@sanity/types",
												"packagePath": "lib/index.d.mts",
												"qualifiedName": "SanityDocumentLike"
											},
											"name": "SanityDocumentLike",
											"package": "@sanity/types"
										}
									],
									"name": "DocumentHandle",
									"package": "@sanity/sdk"
								}
							}
						},
						{
							"id": 239,
							"name": "hasMore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there are more items available to load"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 60,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L60"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 241,
							"name": "isPending",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether a query is currently in progress"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 68,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L68"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 242,
							"name": "loadMore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Function to load the next batch of results"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 72,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L72"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 243,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
											"line": 72,
											"character": 12,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L72"
										}
									],
									"signatures": [
										{
											"id": 244,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
													"line": 72,
													"character": 12,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L72"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								240,
								238,
								239,
								241,
								242
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
							"line": 52,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L52"
						}
					]
				},
				{
					"id": 167,
					"name": "NavigateToStudioResult",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 171,
							"name": "isConnected",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
									"line": 18,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L18"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 168,
							"name": "navigateToStudioDocument",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
									"line": 17,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L17"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 169,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
											"line": 17,
											"character": 28,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L17"
										}
									],
									"signatures": [
										{
											"id": 170,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
													"line": 17,
													"character": 28,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L17"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								171,
								168
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
							"line": 16,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L16"
						}
					]
				},
				{
					"id": 248,
					"name": "PaginatedDocumentsOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configuration options for the usePaginatedDocuments hook"
							}
						],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 258,
							"name": "cache",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2355,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.cache"
							}
						},
						{
							"id": 259,
							"name": "cacheMode",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When set to "
									},
									{
										"kind": "code",
										"text": "`noStale`"
									},
									{
										"kind": "text",
										"text": ", APICDN will not return a cached response if the content is stale.\nTradeoff between latency and freshness of content.\n\nOnly to be used with live content queries and when useCdn is true."
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2364,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "noStale"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.cacheMode"
							}
						},
						{
							"id": 260,
							"name": "dataset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L16"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.dataset"
							}
						},
						{
							"id": 249,
							"name": "filter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "GROQ filter expression to apply to the query"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 21,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L21"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 254,
							"name": "next",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2356,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.next"
							}
						},
						{
							"id": 251,
							"name": "orderings",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sorting configuration for the results"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 29,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L29"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 386,
									"name": "SortOrderingItem",
									"package": "@sanity/types"
								}
							}
						},
						{
							"id": 250,
							"name": "pageSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Number of items to display per page (defaults to 25)"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 25,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L25"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 253,
							"name": "params",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/query/queryStore.ts",
									"line": 56,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/query/queryStore.ts#L56"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.params"
							}
						},
						{
							"id": 256,
							"name": "perspective",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2350,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/client",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "ClientPerspective"
								},
								"name": "ClientPerspective",
								"package": "@sanity/client"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.perspective"
							}
						},
						{
							"id": 261,
							"name": "projectId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.projectId"
							}
						},
						{
							"id": 252,
							"name": "search",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text search query to filter results"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 33,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L33"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 257,
							"name": "tag",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2327,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.tag"
							}
						},
						{
							"id": 255,
							"name": "useCdn",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2353,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "QueryOptions.useCdn"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								258,
								259,
								260,
								249,
								254,
								251,
								250,
								253,
								256,
								261,
								252,
								257,
								255
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
							"line": 17,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L17"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@sanity/sdk",
								"packagePath": "src/query/queryStore.ts",
								"qualifiedName": "QueryOptions"
							},
							"name": "QueryOptions",
							"package": "@sanity/sdk"
						}
					]
				},
				{
					"id": 262,
					"name": "PaginatedDocumentsResponse",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Return value from the usePaginatedDocuments hook"
							}
						],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 270,
							"name": "count",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Total count of items matching the query"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 76,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L76"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 266,
							"name": "currentPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current page number (1-indexed)"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 59,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L59"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 263,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Array of document handles for the current page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 46,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L46"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"packageName": "@sanity/sdk",
										"packagePath": "src/config/sanityConfig.ts",
										"qualifiedName": "DocumentHandle"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"packageName": "@sanity/types",
												"packagePath": "lib/index.d.mts",
												"qualifiedName": "SanityDocumentLike"
											},
											"name": "SanityDocumentLike",
											"package": "@sanity/types"
										}
									],
									"name": "DocumentHandle",
									"package": "@sanity/sdk"
								}
							}
						},
						{
							"id": 269,
							"name": "endIndex",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Ending index of the current page (exclusive, 0-indexed)"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 72,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L72"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 271,
							"name": "firstPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Navigate to the first page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 81,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L81"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 272,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
											"line": 81,
											"character": 13,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L81"
										}
									],
									"signatures": [
										{
											"id": 273,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
													"line": 81,
													"character": 13,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L81"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 287,
							"name": "goToPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Navigate to a specific page number"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 118,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L118"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 288,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
											"line": 118,
											"character": 12,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L118"
										}
									],
									"signatures": [
										{
											"id": 289,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
													"line": 118,
													"character": 12,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L118"
												}
											],
											"parameters": [
												{
													"id": 290,
													"name": "pageNumber",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The page number to navigate to (1-indexed)"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 274,
							"name": "hasFirstPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there is a first page available to navigate to"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 85,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L85"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 286,
							"name": "hasLastPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there is a last page available to navigate to"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 112,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L112"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 282,
							"name": "hasNextPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there is a next page available to navigate to"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 103,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L103"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 278,
							"name": "hasPreviousPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there is a previous page available to navigate to"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 94,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L94"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 264,
							"name": "isPending",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether a query is currently in progress"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 50,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L50"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 283,
							"name": "lastPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Navigate to the last page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 108,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L108"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 284,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
											"line": 108,
											"character": 12,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L108"
										}
									],
									"signatures": [
										{
											"id": 285,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
													"line": 108,
													"character": 12,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L108"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 279,
							"name": "nextPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Navigate to the next page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 99,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L99"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 280,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
											"line": 99,
											"character": 12,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L99"
										}
									],
									"signatures": [
										{
											"id": 281,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
													"line": 99,
													"character": 12,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L99"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 265,
							"name": "pageSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Number of items displayed per page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 55,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L55"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 275,
							"name": "previousPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Navigate to the previous page"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 90,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L90"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 276,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
											"line": 90,
											"character": 16,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L90"
										}
									],
									"signatures": [
										{
											"id": 277,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
													"line": 90,
													"character": 16,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L90"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 268,
							"name": "startIndex",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Starting index of the current page (0-indexed)"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 68,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L68"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 267,
							"name": "totalPages",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Total number of pages available"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 63,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L63"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								270,
								266,
								263,
								269,
								271,
								287,
								274,
								286,
								282,
								278,
								264,
								283,
								279,
								265,
								275,
								268,
								267
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
							"line": 42,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L42"
						}
					]
				},
				{
					"id": 324,
					"name": "ProjectWithoutMembers",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 332,
							"name": "createdAt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2982,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 326,
							"name": "displayName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2972,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 325,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2971,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 329,
							"name": "isBlocked",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2979,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 330,
							"name": "isDisabled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2980,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 331,
							"name": "isDisabledByUser",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2981,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 334,
							"name": "maxRetentionDays",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2984,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 335,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2986,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 336,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 337,
											"name": "cliInitializedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
													"line": 2987,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 338,
											"name": "color",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
													"line": 2988,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 339,
											"name": "externalStudioHost",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [],
												"blockTags": [
													{
														"tag": "@deprecated",
														"content": [
															{
																"kind": "text",
																"text": "Use the "
															},
															{
																"kind": "code",
																"text": "`/user-applications`"
															},
															{
																"kind": "text",
																"text": " endpoint instead, which lists all deployed studios/applications"
															}
														]
													},
													{
														"tag": "@see",
														"content": [
															{
																"kind": "text",
																"text": "https://www.sanity.io/help/studio-host-user-applications"
															}
														]
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
													"line": 2993,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												337,
												338,
												339
											]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
											"line": 2986,
											"character": 12
										}
									]
								}
							}
						},
						{
							"id": 328,
							"name": "organizationId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2978,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 333,
							"name": "pendingInvites",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2983,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 327,
							"name": "studioHost",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Use the "
											},
											{
												"kind": "code",
												"text": "`/user-applications`"
											},
											{
												"kind": "text",
												"text": " endpoint instead, which lists all deployed studios/applications"
											}
										]
									},
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": "https://www.sanity.io/help/studio-host-user-applications"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2977,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								332,
								326,
								325,
								329,
								330,
								331,
								334,
								335,
								328,
								333,
								327
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projects/useProjects.ts",
							"line": 11,
							"character": 12,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projects/useProjects.ts#L11"
						}
					]
				},
				{
					"id": 12,
					"name": "SanityAppProps",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 15,
							"name": "children",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/components/SanityApp.tsx",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L16"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@types/react",
									"packagePath": "index.d.ts",
									"qualifiedName": "React.ReactNode"
								},
								"name": "ReactNode",
								"package": "@types/react",
								"qualifiedName": "React.ReactNode"
							}
						},
						{
							"id": 13,
							"name": "config",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/components/SanityApp.tsx",
									"line": 13,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L13"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "SanityConfig"
										},
										"name": "SanityConfig",
										"package": "@sanity/sdk"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "@sanity/sdk",
												"packagePath": "src/config/sanityConfig.ts",
												"qualifiedName": "SanityConfig"
											},
											"name": "SanityConfig",
											"package": "@sanity/sdk"
										}
									}
								]
							}
						},
						{
							"id": 16,
							"name": "fallback",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/components/SanityApp.tsx",
									"line": 18,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L18"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@types/react",
									"packagePath": "index.d.ts",
									"qualifiedName": "React.ReactNode"
								},
								"name": "ReactNode",
								"package": "@types/react",
								"qualifiedName": "React.ReactNode"
							}
						},
						{
							"id": 14,
							"name": "sanityConfigs",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "use the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " prop instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/components/SanityApp.tsx",
									"line": 15,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L15"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"packageName": "@sanity/sdk",
										"packagePath": "src/config/sanityConfig.ts",
										"qualifiedName": "SanityConfig"
									},
									"name": "SanityConfig",
									"package": "@sanity/sdk"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								15,
								13,
								16,
								14
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/components/SanityApp.tsx",
							"line": 11,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L11"
						}
					]
				},
				{
					"id": 378,
					"name": "SanityDocument",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true,
						"isExternal": true
					},
					"children": [
						{
							"id": 381,
							"name": "_createdAt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2996,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 379,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2994,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 383,
							"name": "_rev",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2998,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 380,
							"name": "_type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2995,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 382,
							"name": "_updatedAt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2997,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								381,
								379,
								383,
								380,
								382
							]
						}
					],
					"sources": [
						{
							"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
							"line": 2993,
							"character": 25
						}
					],
					"indexSignatures": [
						{
							"id": 384,
							"name": "__index",
							"variant": "signature",
							"kind": 8192,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 2999,
									"character": 2
								}
							],
							"parameters": [
								{
									"id": 385,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					]
				},
				{
					"id": 372,
					"name": "SanityProjectMember",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true,
						"isExternal": true
					},
					"children": [
						{
							"id": 373,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 2999,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 376,
							"name": "isCurrentUser",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 3002,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 375,
							"name": "isRobot",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 3001,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 374,
							"name": "role",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
									"line": 3000,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								373,
								376,
								375,
								374
							]
						}
					],
					"sources": [
						{
							"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
							"line": 2998,
							"character": 25
						}
					]
				},
				{
					"id": 386,
					"name": "SortOrderingItem",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 388,
							"name": "direction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 3281,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "desc"
									},
									{
										"type": "literal",
										"value": "asc"
									}
								]
							}
						},
						{
							"id": 387,
							"name": "field",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
									"line": 3280,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								388,
								387
							]
						}
					],
					"sources": [
						{
							"fileName": "node_modules/.pnpm/@sanity+types@3.86.1_@types+react@19.1.2/node_modules/@sanity/types/lib/index.d.mts",
							"line": 3279,
							"character": 25
						}
					]
				},
				{
					"id": 297,
					"name": "UsePreviewOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 301,
							"name": "dataset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L16"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.dataset"
							}
						},
						{
							"id": 299,
							"name": "documentId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 35,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L35"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.documentId"
							}
						},
						{
							"id": 300,
							"name": "documentType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 23,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L23"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.documentType"
							}
						},
						{
							"id": 302,
							"name": "projectId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.projectId"
							}
						},
						{
							"id": 298,
							"name": "ref",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional ref object to track visibility. When provided, preview resolution\nonly occurs when the referenced element is visible in the viewport."
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L16"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@types/react",
									"packagePath": "index.d.ts",
									"qualifiedName": "React.RefObject"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "RefObject",
								"package": "@types/react",
								"qualifiedName": "React.RefObject"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								301,
								299,
								300,
								302,
								298
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
							"line": 11,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L11"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@sanity/sdk",
								"packagePath": "src/config/sanityConfig.ts",
								"qualifiedName": "DocumentHandle"
							},
							"name": "DocumentHandle",
							"package": "@sanity/sdk"
						}
					]
				},
				{
					"id": 303,
					"name": "UsePreviewResults",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"children": [
						{
							"id": 304,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The results of resolving the document’s preview values"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
									"line": 25,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L25"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/sdk",
									"packagePath": "src/preview/previewStore.ts",
									"qualifiedName": "PreviewValue"
								},
								"name": "PreviewValue",
								"package": "@sanity/sdk"
							}
						},
						{
							"id": 305,
							"name": "isPending",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "True when preview values are being refreshed"
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
									"line": 27,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L27"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								304,
								305
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
							"line": 23,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L23"
						}
					]
				},
				{
					"id": 310,
					"name": "UseProjectionOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 315,
							"name": "dataset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L16"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.dataset"
							}
						},
						{
							"id": 313,
							"name": "documentId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 35,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L35"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.documentId"
							}
						},
						{
							"id": 314,
							"name": "documentType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 23,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L23"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.documentType"
							}
						},
						{
							"id": 316,
							"name": "projectId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "packages/core/src/config/sanityConfig.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/core/src/config/sanityConfig.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "DocumentHandle.projectId"
							}
						},
						{
							"id": 312,
							"name": "projection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projection/useProjection.ts",
									"line": 18,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L18"
								}
							],
							"type": {
								"type": "templateLiteral",
								"head": "{",
								"tail": [
									[
										{
											"type": "intrinsic",
											"name": "string"
										},
										"}"
									]
								]
							}
						},
						{
							"id": 311,
							"name": "ref",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projection/useProjection.ts",
									"line": 17,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L17"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@types/react",
									"packagePath": "index.d.ts",
									"qualifiedName": "React.RefObject"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "RefObject",
								"package": "@types/react",
								"qualifiedName": "React.RefObject"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								315,
								313,
								314,
								316,
								312,
								311
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projection/useProjection.ts",
							"line": 16,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L16"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@sanity/sdk",
								"packagePath": "src/config/sanityConfig.ts",
								"qualifiedName": "DocumentHandle"
							},
							"name": "DocumentHandle",
							"package": "@sanity/sdk"
						}
					]
				},
				{
					"id": 317,
					"name": "UseProjectionResults",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 318,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projection/useProjection.ts",
									"line": 26,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L26"
								}
							],
							"type": {
								"type": "reference",
								"target": 320,
								"name": "TData",
								"package": "@sanity/sdk-react",
								"qualifiedName": "UseProjectionResults.TData",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 319,
							"name": "isPending",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projection/useProjection.ts",
									"line": 27,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L27"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								318,
								319
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projection/useProjection.ts",
							"line": 25,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L25"
						}
					],
					"typeParameters": [
						{
							"id": 320,
							"name": "TData",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					]
				},
				{
					"id": 350,
					"name": "UsersResult",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Types"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 351,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The users fetched."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/users/useUsers.ts",
									"line": 22,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L22"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"packageName": "@sanity/sdk",
										"packagePath": "src/users/types.ts",
										"qualifiedName": "SanityUser"
									},
									"name": "SanityUser",
									"package": "@sanity/sdk"
								}
							}
						},
						{
							"id": 352,
							"name": "hasMore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether there are more users to fetch."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/users/useUsers.ts",
									"line": 26,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L26"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 353,
							"name": "isPending",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether a users request is currently in progress"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/users/useUsers.ts",
									"line": 31,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L31"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 354,
							"name": "loadMore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Load more users."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/users/useUsers.ts",
									"line": 35,
									"character": 2,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L35"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 355,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/users/useUsers.ts",
											"line": 35,
											"character": 12,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L35"
										}
									],
									"signatures": [
										{
											"id": 356,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/users/useUsers.ts",
													"line": 35,
													"character": 12,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L35"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								351,
								352,
								353,
								354
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react/src/hooks/users/useUsers.ts",
							"line": 18,
							"character": 17,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L18"
						}
					]
				},
				{
					"id": 377,
					"name": "ComlinkStatus",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {
						"isPublic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/.pnpm/@sanity+comlink@3.0.1/node_modules/@sanity/comlink/dist/index.d.ts",
							"line": 6997,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "idle"
							},
							{
								"type": "literal",
								"value": "handshaking"
							},
							{
								"type": "literal",
								"value": "connected"
							},
							{
								"type": "literal",
								"value": "disconnected"
							}
						]
					}
				},
				{
					"id": 362,
					"name": "DatasetsResponse",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {
						"isPublic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
							"line": 662,
							"character": 20
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 363,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {
									"isExternal": true
								},
								"children": [
									{
										"id": 365,
										"name": "aclMode",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 664,
												"character": 2
											}
										],
										"type": {
											"type": "reference",
											"target": {
												"packageName": "@sanity/client",
												"packagePath": "dist/index.d.ts",
												"qualifiedName": "DatasetAclMode"
											},
											"name": "DatasetAclMode",
											"package": "@sanity/client"
										}
									},
									{
										"id": 368,
										"name": "addonFor",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 667,
												"character": 2
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "literal",
													"value": null
												}
											]
										}
									},
									{
										"id": 366,
										"name": "createdAt",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 665,
												"character": 2
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 367,
										"name": "createdByUserId",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 666,
												"character": 2
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 369,
										"name": "datasetProfile",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 668,
												"character": 2
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 370,
										"name": "features",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 669,
												"character": 2
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									},
									{
										"id": 364,
										"name": "name",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 663,
												"character": 2
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 371,
										"name": "tags",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
												"line": 670,
												"character": 2
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											365,
											368,
											366,
											367,
											369,
											370,
											364,
											371
										]
									}
								],
								"sources": [
									{
										"fileName": "node_modules/.pnpm/@sanity+client@6.29.1/node_modules/@sanity/client/dist/index.d.ts",
										"line": 662,
										"character": 39
									}
								]
							}
						}
					}
				},
				{
					"id": 180,
					"name": "useApplyDocumentActions",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Provides a callback for applying one or more actions to a document."
							}
						],
						"blockTags": [
							{
								"tag": "@category",
								"content": [
									{
										"kind": "text",
										"text": "Documents"
									}
								]
							},
							{
								"tag": "@example",
								"name": "Publish or unpublish a document",
								"content": [
									{
										"kind": "code",
										"text": "```\nimport { publishDocument, unpublishDocument } from '@sanity/sdk'\nimport { useApplyDocumentActions } from '@sanity/sdk-react'\n\nconst apply = useApplyDocumentActions()\nconst myDocument = { documentId: 'my-document-id', documentType: 'my-document-type' }\n\nreturn (\n  <button onClick={() => apply(publishDocument(myDocument))}>Publish</button>\n  <button onClick={() => apply(unpublishDocument(myDocument))}>Unpublish</button>\n)\n```"
									}
								]
							},
							{
								"tag": "@example",
								"name": "Create and publish a new document",
								"content": [
									{
										"kind": "code",
										"text": "```\nimport { createDocument, publishDocument } from '@sanity/sdk'\nimport { useApplyDocumentActions } from '@sanity/sdk-react'\n\nconst apply = useApplyDocumentActions()\n\nconst handleCreateAndPublish = () => {\n  const handle = { documentId: window.crypto.randomUUID(), documentType: 'my-document-type' }\n  apply([\n    createDocument(handle),\n    publishDocument(handle),\n  ])\n}\n\nreturn (\n  <button onClick={handleCreateAndPublish}>\n    I'm feeling lucky\n  </button>\n)\n```"
									}
								]
							}
						],
						"modifierTags": [
							"@beta"
						]
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useApplyDocumentActions.ts",
							"line": 50,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useApplyDocumentActions.ts#L50"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 181,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/helpers/createCallbackHook.tsx",
									"line": 8,
									"character": 3,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/helpers/createCallbackHook.tsx#L8"
								}
							],
							"signatures": [
								{
									"id": 182,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A function that takes one more more "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "DocumentAction"
													},
													{
														"kind": "text",
														"text": "s and returns a promise that resolves to an "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "ActionsResult"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/helpers/createCallbackHook.tsx",
											"line": 8,
											"character": 3,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/helpers/createCallbackHook.tsx#L8"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 183,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/helpers/createCallbackHook.tsx",
													"line": 8,
													"character": 9,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/helpers/createCallbackHook.tsx#L8"
												}
											],
											"signatures": [
												{
													"id": 184,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react/src/hooks/helpers/createCallbackHook.tsx",
															"line": 8,
															"character": 9,
															"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/helpers/createCallbackHook.tsx#L8"
														}
													],
													"parameters": [
														{
															"id": 185,
															"name": "params",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "tuple",
																"elements": [
																	{
																		"type": "namedTupleMember",
																		"name": "action",
																		"isOptional": false,
																		"element": {
																			"type": "union",
																			"types": [
																				{
																					"type": "reference",
																					"target": {
																						"packageName": "@sanity/sdk",
																						"packagePath": "src/document/actions.ts",
																						"qualifiedName": "DocumentAction"
																					},
																					"name": "DocumentAction",
																					"package": "@sanity/sdk"
																				},
																				{
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"target": {
																							"packageName": "@sanity/sdk",
																							"packagePath": "src/document/actions.ts",
																							"qualifiedName": "DocumentAction"
																						},
																						"name": "DocumentAction",
																						"package": "@sanity/sdk"
																					}
																				}
																			]
																		}
																	},
																	{
																		"type": "namedTupleMember",
																		"name": "options",
																		"isOptional": true,
																		"element": {
																			"type": "reference",
																			"target": {
																				"packageName": "@sanity/sdk",
																				"packagePath": "src/document/applyDocumentActions.ts",
																				"qualifiedName": "ApplyDocumentActionsOptions"
																			},
																			"name": "ApplyDocumentActionsOptions",
																			"package": "@sanity/sdk"
																		}
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"packageName": "typescript",
															"packagePath": "lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 9,
					"name": "SanityApp",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/components/SanityApp.tsx",
							"line": 77,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L77"
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "SanityApp",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The SanityApp component provides your Sanity application with access to your Sanity configuration,\nas well as application context and state which is used by the Sanity React hooks. Your application\nmust be wrapped with the SanityApp component to function properly.\n\nSanityApp creates a hierarchy of ResourceProviders, each providing a SanityInstance that can be\naccessed by hooks. The first configuration in the array becomes the default instance."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Components"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Your Sanity application, integrated with your Sanity configuration and application context"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nimport { SanityApp } from '@sanity/sdk-react'\n\nimport MyAppRoot from './Root'\n\n// Single project configuration\nconst mySanityConfig = {\n  projectId: 'my-project-id',\n  dataset: 'production',\n}\n\n// Or multiple project configurations\nconst multipleConfigs = [\n  // Configuration for your main project. This will be used as the default project for hooks.\n  {\n    projectId: 'marketing-website-project',\n    dataset: 'production',\n  },\n  // Configuration for a separate blog project\n  {\n    projectId: 'blog-project',\n    dataset: 'production',\n  },\n  // Configuration for a separate ecommerce project\n  {\n    projectId: 'ecommerce-project',\n    dataset: 'production',\n  }\n]\n\nexport default function MyApp() {\n  return (\n    <SanityApp config={mySanityConfig} fallback={<LoadingSpinner />}>\n      <MyAppRoot />\n    </SanityApp>\n  )\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/components/SanityApp.tsx",
									"line": 77,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/components/SanityApp.tsx#L77"
								}
							],
							"parameters": [
								{
									"id": 11,
									"name": "props",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Your Sanity configuration and the React children to render"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 12,
										"name": "SanityAppProps",
										"package": "@sanity/sdk-react"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@types/react",
									"packagePath": "index.d.ts",
									"qualifiedName": "React.ReactElement"
								},
								"name": "ReactElement",
								"package": "@types/react",
								"qualifiedName": "React.ReactElement"
							}
						}
					]
				},
				{
					"id": 72,
					"name": "useClient",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/client/useClient.ts",
							"line": 33,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/client/useClient.ts#L33"
						}
					],
					"signatures": [
						{
							"id": 73,
							"name": "useClient",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A React hook that provides a client that subscribes to changes in your application,\nsuch as user authentication changes."
									}
								],
								"blockTags": [
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "The hook uses "
											},
											{
												"kind": "code",
												"text": "`useSyncExternalStore`"
											},
											{
												"kind": "text",
												"text": " to safely subscribe to changes\nand ensure consistency between server and client rendering."
											}
										]
									},
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Platform"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A Sanity client"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nfunction MyComponent() {\n  const client = useClient({apiVersion: '2024-11-12'})\n  const [document, setDocument] = useState(null)\n  useEffect(async () => {\n    const doc = client.fetch('*[_id == \"myDocumentId\"]')\n    setDocument(doc)\n  }, [])\n return <div>{JSON.stringify(document) ?? 'Loading...'}</div>\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/client/useClient.ts",
									"line": 33,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/client/useClient.ts#L33"
								}
							],
							"parameters": [
								{
									"id": 74,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "namedTupleMember",
												"name": "x",
												"isOptional": false,
												"element": {
													"type": "reference",
													"target": {
														"packageName": "@sanity/sdk",
														"packagePath": "src/client/clientStore.ts",
														"qualifiedName": "ClientOptions"
													},
													"name": "ClientOptions",
													"package": "@sanity/sdk"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/client",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "SanityClient"
								},
								"name": "SanityClient",
								"package": "@sanity/client"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "useCurrentUser",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@TODO",
								"content": [
									{
										"kind": "text",
										"text": "This should not return null — users of a custom app will always be authenticated via Core"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/auth/useCurrentUser.tsx",
							"line": 34,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/auth/useCurrentUser.tsx#L34"
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "useCurrentUser",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Provides the currently authenticated user’s profile information."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Users"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The current user data"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Rendering a basic user profile",
										"content": [
											{
												"kind": "code",
												"text": "```\nconst user = useCurrentUser()\n\nreturn (\n  <figure>\n    <img src={user?.profileImage} alt=`Profile image for ${user?.name}` />\n    <h2>{user?.name}</h2>\n  </figure>\n)\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/auth/useCurrentUser.tsx",
									"line": 34,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/auth/useCurrentUser.tsx#L34"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "@sanity/types",
											"packagePath": "lib/index.d.mts",
											"qualifiedName": "CurrentUser"
										},
										"name": "CurrentUser",
										"package": "@sanity/types"
									}
								]
							}
						}
					]
				},
				{
					"id": 56,
					"name": "useDashboardOrganizationId",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/auth/useDashboardOrganizationId.tsx",
							"line": 25,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/auth/useDashboardOrganizationId.tsx#L25"
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "useDashboardOrganizationId",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A React hook that retrieves the dashboard organization ID that is currently selected in the Sanity Dashboard."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nfunction DashboardComponent() {\n  const orgId = useDashboardOrganizationId()\n\n  if (!orgId) return null\n\n  return <div>Organization ID: {String(orgId)}</div>\n}\n```"
											}
										]
									},
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Dashboard"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The dashboard organization ID (string | undefined)"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/auth/useDashboardOrganizationId.tsx",
									"line": 25,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/auth/useDashboardOrganizationId.tsx#L25"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					]
				},
				{
					"id": 178,
					"name": "useDatasets",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/datasets/useDatasets.ts",
							"line": 42,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/datasets/useDatasets.ts#L42"
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "useDatasets",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns metadata for each dataset the current user has access to."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Datasets"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The metadata for your the datasets"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst datasets = useDatasets()\n\nreturn (\n  <select>\n    {datasets.map((dataset) => (\n      <option key={dataset.name}>{dataset.name}</option>\n    ))}\n  </select>\n)\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/datasets/useDatasets.ts",
									"line": 42,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/datasets/useDatasets.ts#L42"
								}
							],
							"type": {
								"type": "reference",
								"target": 362,
								"name": "DatasetsResponse",
								"package": "@sanity/client"
							}
						}
					]
				},
				{
					"id": 186,
					"name": "useDocument",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Reads and subscribes to a document's realtime state, incorporating both local and remote changes.\nWhen called with a "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " argument, the hook will return the nested value's state.\nWhen called without a "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " argument, the entire document's state will be returned."
							}
						],
						"blockTags": [
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "code",
										"text": "`useDocument`"
									},
									{
										"kind": "text",
										"text": " is designed to be used within a realtime context in which local updates to documents\nneed to be displayed before they are persisted to the remote copy. This can be useful within a collaborative\nor realtime editing interface where local changes need to be reflected immediately.\n\nThe hook automatically uses the correct Sanity instance based on the project and dataset\nspecified in the DocumentHandle. This makes it easy to work with documents from different\nprojects or datasets in the same component.\n\nHowever, this hook can be too resource intensive for applications where static document values simply\nneed to be displayed (or when changes to documents don't need to be reflected immediately);\nconsider using "
									},
									{
										"kind": "code",
										"text": "`usePreview`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`useQuery`"
									},
									{
										"kind": "text",
										"text": " for these use cases instead. These hooks leverage the Sanity\nLive Content API to provide a more efficient way to read and subscribe to document state."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useDocument.ts",
							"line": 44,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocument.ts#L44"
						},
						{
							"fileName": "packages/react/src/hooks/document/useDocument.ts",
							"line": 95,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocument.ts#L95"
						},
						{
							"fileName": "packages/react/src/hooks/document/useDocument.ts",
							"line": 119,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocument.ts#L119"
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "useDocument",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "## useDocument(doc, path)\nRead and subscribe to nested values in a document"
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The value at the specified path"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nimport {useDocument} from '@sanity/sdk-react'\n\nconst documentHandle = {\n  documentId: 'order-123',\n  documentType: 'order',\n  projectId: 'abc123',\n  dataset: 'production'\n}\n\nfunction OrderLink() {\n  const title = useDocument(documentHandle, 'title')\n  const id = useDocument(documentHandle, '_id')\n\n  return (\n    <a href={`/order/${id}`}>Order {title} today!</a>\n  )\n}\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useDocument.ts",
									"line": 44,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocument.ts#L44"
								}
							],
							"typeParameters": [
								{
									"id": 188,
									"name": "TDocument",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 378,
										"name": "SanityDocument",
										"package": "@sanity/types"
									}
								},
								{
									"id": 189,
									"name": "TPath",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 190,
									"name": "doc",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document to read state from, specified as a DocumentHandle"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 188,
												"name": "TDocument",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										],
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								},
								{
									"id": 191,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path to the nested value to read from"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 189,
										"name": "TPath",
										"package": "@sanity/sdk-react",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/document/patchOperations.ts",
											"qualifiedName": "JsonMatch"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 188,
												"name": "TDocument",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 189,
												"name": "TPath",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										],
										"name": "JsonMatch",
										"package": "@sanity/sdk"
									}
								]
							}
						},
						{
							"id": 192,
							"name": "useDocument",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "## useDocument(doc)\nRead and subscribe to an entire document"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The document state as an object"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nimport {type SanityDocument, useDocument} from '@sanity/sdk-react'\n\ninterface Book extends SanityDocument {\n  title: string\n  author: string\n  summary: string\n}\n\nconst documentHandle = {\n  documentId: 'book-123',\n  documentType: 'book',\n  projectId: 'abc123',\n  dataset: 'production'\n}\n\nfunction DocumentView() {\n  const book = useDocument<Book>(documentHandle)\n\n  if (!book) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <article>\n      <h1>{book.title}</h1>\n      <address>By {book.author}</address>\n\n      <h2>Summary</h2>\n      {book.summary}\n\n      <h2>Order</h2>\n      <a href={`/order/${book._id}`}>Order {book.title} today!</a>\n    </article>\n  )\n}\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useDocument.ts",
									"line": 95,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocument.ts#L95"
								}
							],
							"typeParameters": [
								{
									"id": 193,
									"name": "TDocument",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 378,
										"name": "SanityDocument",
										"package": "@sanity/types"
									}
								}
							],
							"parameters": [
								{
									"id": 194,
									"name": "doc",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document to read state from, specified as a DocumentHandle"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 193,
												"name": "TDocument",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										],
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": 193,
										"name": "TDocument",
										"package": "@sanity/sdk-react",
										"refersToTypeParameter": true
									}
								]
							}
						}
					]
				},
				{
					"id": 195,
					"name": "useDocumentEvent",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useDocumentEvent.ts",
							"line": 32,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentEvent.ts#L32"
						}
					],
					"signatures": [
						{
							"id": 196,
							"name": "useDocumentEvent",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Subscribes an event handler to events in your application's document store, such as document\ncreation, deletion, and updates."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\nimport {useDocumentEvent} from '@sanity/sdk-react'\nimport {type DocumentEvent} from '@sanity/sdk'\n\nuseDocumentEvent((event) => {\n  if (event.type === DocumentEvent.DocumentDeletedEvent) {\n    alert(`Document with ID ${event.documentId} deleted!`)\n  } else {\n    console.log(event)\n  }\n})\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useDocumentEvent.ts",
									"line": 32,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentEvent.ts#L32"
								}
							],
							"parameters": [
								{
									"id": 197,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler to register."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 198,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/document/useDocumentEvent.ts",
													"line": 33,
													"character": 11,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentEvent.ts#L33"
												}
											],
											"signatures": [
												{
													"id": 199,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react/src/hooks/document/useDocumentEvent.ts",
															"line": 33,
															"character": 11,
															"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentEvent.ts#L33"
														}
													],
													"parameters": [
														{
															"id": 200,
															"name": "documentEvent",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "@sanity/sdk",
																	"packagePath": "src/document/events.ts",
																	"qualifiedName": "DocumentEvent"
																},
																"name": "DocumentEvent",
																"package": "@sanity/sdk"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 201,
									"name": "dataset",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DatasetHandle"
										},
										"name": "DatasetHandle",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 202,
					"name": "useDocumentPermissions",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useDocumentPermissions.ts",
							"line": 45,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentPermissions.ts#L45"
						}
					],
					"signatures": [
						{
							"id": 203,
							"name": "useDocumentPermissions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Check if the current user has the specified permissions for the given document actions."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Permissions"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object that specifies whether the action is allowed; if the action is not allowed, an explanatory message and list of reasons is also provided."
											}
										]
									},
									{
										"tag": "@example",
										"name": "Checking for permission to publish a document",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {useDocumentPermissions, useApplyDocumentActions} from '@sanity/sdk-react'\nimport {publishDocument} from '@sanity/sdk'\n\nexport function PublishButton({doc}: {doc: DocumentHandle}) {\n  const publishPermissions = useDocumentPermissions(publishDocument(doc))\n  const applyAction = useApplyDocumentActions()\n\n  return (\n    <>\n      <button\n        disabled={!publishPermissions.allowed}\n        onClick={() => applyAction(publishDocument(doc))}\n        popoverTarget={`${publishPermissions.allowed ? undefined : 'publishButtonPopover'}`}\n      >\n        Publish\n      </button>\n      {!publishPermissions.allowed && (\n        <div popover id=\"publishButtonPopover\">\n          {publishPermissions.message}\n        </div>\n      )}\n    </>\n  )\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useDocumentPermissions.ts",
									"line": 45,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentPermissions.ts#L45"
								}
							],
							"parameters": [
								{
									"id": 204,
									"name": "actionOrActions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "One more more calls to a particular document action function for a given document"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"packageName": "@sanity/sdk",
													"packagePath": "src/document/actions.ts",
													"qualifiedName": "DocumentAction"
												},
												"name": "DocumentAction",
												"package": "@sanity/sdk"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "@sanity/sdk",
														"packagePath": "src/document/actions.ts",
														"qualifiedName": "DocumentAction"
													},
													"name": "DocumentAction",
													"package": "@sanity/sdk"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/sdk",
									"packagePath": "src/document/permissions.ts",
									"qualifiedName": "DocumentPermissionsResult"
								},
								"name": "DocumentPermissionsResult",
								"package": "@sanity/sdk"
							}
						}
					]
				},
				{
					"id": 245,
					"name": "useDocuments",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
							"line": 116,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L116"
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "useDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves batches of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "DocumentHandle",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										}
									},
									{
										"kind": "text",
										"text": "s, narrowed by optional filters, text searches, and custom ordering,\nwith infinite scrolling support. The number of document handles returned per batch is customizable,\nand additional batches can be loaded using the supplied "
									},
									{
										"kind": "code",
										"text": "`loadMore`"
									},
									{
										"kind": "text",
										"text": " function."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object containing the list of document handles, the loading state, the total count of retrieved document handles, and a function to load more"
											}
										]
									},
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "- The returned document handles include projectId and dataset information from the current Sanity instance\n- This makes them ready to use with document operations and other document hooks\n- The hook automatically uses the correct Sanity instance based on the projectId and dataset in the options"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Basic infinite list with loading more",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst { data, hasMore, isPending, loadMore, count } = useDocuments({\n  filter: '_type == \"post\"',\n  search: searchTerm,\n  batchSize: 10,\n  orderings: [{field: '_createdAt', direction: 'desc'}]\n})\n\nreturn (\n  <div>\n    Total documents: {count}\n    <ol>\n      {data.map((doc) => (\n        <li key={doc.documentId}>\n          <MyDocumentComponent doc={doc} />\n        </li>\n      ))}\n    </ol>\n    {hasMore && <button onClick={loadMore} disabled={isPending}>\n      {isPending ? 'Loading...' : 'Load More'}\n    </button>}\n  </div>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/documents/useDocuments.ts",
									"line": 116,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/documents/useDocuments.ts#L116"
								}
							],
							"parameters": [
								{
									"id": 247,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configuration options for the infinite list"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 223,
										"name": "DocumentsOptions",
										"package": "@sanity/sdk-react"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 237,
								"name": "DocumentsResponse",
								"package": "@sanity/sdk-react"
							}
						}
					]
				},
				{
					"id": 205,
					"name": "useDocumentSyncStatus",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useDocumentSyncStatus.ts",
							"line": 33,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentSyncStatus.ts#L33"
						}
					],
					"signatures": [
						{
							"id": 206,
							"name": "useDocumentSyncStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Exposes the document's sync status between local and remote document states."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if local changes are synced with remote, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " if the changes are not synced, and "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": " if the document is not found"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Disable a Save button when there are no changes to sync",
										"content": [
											{
												"kind": "code",
												"text": "```\nconst myDocumentHandle = { documentId: 'documentId', documentType: 'documentType', projectId: 'projectId', dataset: 'dataset' }\nconst documentSynced = useDocumentSyncStatus(myDocumentHandle)\n\nreturn (\n  <button disabled={documentSynced}>\n    Save Changes\n  </button>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useDocumentSyncStatus.ts",
									"line": 33,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useDocumentSyncStatus.ts#L33"
								}
							],
							"parameters": [
								{
									"id": 207,
									"name": "doc",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document handle to get sync status for. If you pass a "
											},
											{
												"kind": "code",
												"text": "`DocumentHandle`"
											},
											{
												"kind": "text",
												"text": " with specified "
											},
											{
												"kind": "code",
												"text": "`projectId`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`dataset`"
											},
											{
												"kind": "text",
												"text": ",\nthe document will be read from the specified Sanity project and dataset that is included in the handle. If no "
											},
											{
												"kind": "code",
												"text": "`projectId`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`dataset`"
											},
											{
												"kind": "text",
												"text": " is provided,\nthe document will use the nearest instance from context."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					]
				},
				{
					"id": 208,
					"name": "useEditDocument",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Enables editing of a document’s state.\nWhen called with a "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " argument, the hook will return a function for updating a nested value.\nWhen called without a "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " argument, the hook will return a function for updating the entire document."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
							"line": 78,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L78"
						},
						{
							"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
							"line": 154,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L154"
						},
						{
							"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
							"line": 166,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L166"
						}
					],
					"signatures": [
						{
							"id": 209,
							"name": "useEditDocument",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "## useEditDocument(doc, path)\nEdit a nested value within a document"
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A function to update the nested value. Accepts either a new value, or an updater function that exposes the previous value and returns a new value."
											}
										]
									},
									{
										"tag": "@example",
										"name": "Update a document's name by providing the new value directly",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst handle = {\n  documentId: 'movie-123',\n  documentType: 'movie',\n  projectId: 'abc123',\n  dataset: 'production'\n}\n\nconst name = useDocument(handle, 'name')\nconst editName = useEditDocument(handle, 'name')\n\nfunction handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n  editName(event.target.value)\n}\n\nreturn (\n  <input type='text' value={name} onChange={handleNameChange} />\n)\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Update a count on a document by providing an updater function",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst handle = {\n  documentId: 'counter-123',\n  documentType: 'counter',\n  projectId: 'abc123',\n  dataset: 'production'\n}\n\nconst count = useDocument(handle, 'count')\nconst editCount = useEditDocument(handle, 'count')\n\nfunction incrementCount() {\n  editCount(previousCount => previousCount + 1)\n}\n\nreturn (\n  <>\n    <button onClick={incrementCount}>\n      Increment\n    </button>\n    Current count: {count}\n  </>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
									"line": 78,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L78"
								}
							],
							"typeParameters": [
								{
									"id": 210,
									"name": "TDocument",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 378,
										"name": "SanityDocument",
										"package": "@sanity/types"
									}
								},
								{
									"id": 211,
									"name": "TPath",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 212,
									"name": "docHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document to be edited, specified as a DocumentHandle"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 210,
												"name": "TDocument",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										],
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								},
								{
									"id": 213,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path to the nested value to be edited"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 211,
										"name": "TPath",
										"package": "@sanity/sdk-react",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 214,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
											"line": 84,
											"character": 3,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L84"
										}
									],
									"signatures": [
										{
											"id": 215,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
													"line": 84,
													"character": 3,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L84"
												}
											],
											"parameters": [
												{
													"id": 216,
													"name": "nextValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"packageName": "@sanity/sdk-react",
															"packagePath": "src/hooks/document/useEditDocument.ts",
															"qualifiedName": "Updater"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "@sanity/sdk",
																	"packagePath": "src/document/patchOperations.ts",
																	"qualifiedName": "JsonMatch"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 210,
																		"name": "TDocument",
																		"package": "@sanity/sdk-react",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "reference",
																		"target": 211,
																		"name": "TPath",
																		"package": "@sanity/sdk-react",
																		"refersToTypeParameter": true
																	}
																],
																"name": "JsonMatch",
																"package": "@sanity/sdk"
															}
														],
														"name": "Updater",
														"package": "@sanity/sdk-react"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@sanity/sdk",
															"packagePath": "src/document/applyDocumentActions.ts",
															"qualifiedName": "ActionsResult"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 210,
																"name": "TDocument",
																"package": "@sanity/sdk-react",
																"refersToTypeParameter": true
															}
														],
														"name": "ActionsResult",
														"package": "@sanity/sdk"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										}
									]
								}
							}
						},
						{
							"id": 217,
							"name": "useEditDocument",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "## useEditDocument(doc)\nEdit an entire document"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A function to update the document state. Accepts either a new document state, or an updater function that exposes the previous document state and returns the new document state."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst myDocumentHandle = {\n  documentId: 'product-123',\n  documentType: 'product',\n  projectId: 'abc123',\n  dataset: 'production'\n}\n\nconst myDocument = useDocument(myDocumentHandle)\nconst { title, price } = myDocument ?? {}\n\nconst editMyDocument = useEditDocument(myDocumentHandle)\n\nfunction handleFieldChange(e: React.ChangeEvent<HTMLInputElement>) {\n  const {name, value} = e.currentTarget\n  // Use an updater function to update the document state based on the previous state\n  editMyDocument(previousDocument => ({\n    ...previousDocument,\n    [name]: value\n  }))\n}\n\nfunction handleSaleChange(e: React.ChangeEvent<HTMLInputElement>) {\n  const { checked } = e.currentTarget\n  if (checked) {\n    // Use an updater function to add a new salePrice field;\n    // set it at a 20% discount off the normal price\n    editMyDocument(previousDocument => ({\n      ...previousDocument,\n      salePrice: previousDocument.price * 0.8,\n    }))\n  } else {\n    // Get the document state without the salePrice field\n    const { salePrice, ...rest } = myDocument\n    // Update the document state to remove the salePrice field\n    editMyDocument(rest)\n  }\n}\n\nreturn (\n  <>\n    <form onSubmit={e => e.preventDefault()}>\n      <input name='title' type='text' value={title} onChange={handleFieldChange} />\n      <input name='price' type='number' value={price} onChange={handleFieldChange} />\n      <input\n        name='salePrice'\n        type='checkbox'\n        checked={myDocument && 'salePrice' in myDocument}\n        onChange={handleSaleChange}\n      />\n    </form>\n    <pre><code>\n      {JSON.stringify(myDocument, null, 2)}\n    </code></pre>\n  </>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
									"line": 154,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L154"
								}
							],
							"typeParameters": [
								{
									"id": 218,
									"name": "TDocument",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 378,
										"name": "SanityDocument",
										"package": "@sanity/types"
									}
								}
							],
							"parameters": [
								{
									"id": 219,
									"name": "docHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document to be edited, specified as a DocumentHandle.\nThe hook will automatically use the Sanity instance that matches the project and dataset specified in the handle."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 218,
												"name": "TDocument",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										],
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 220,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
											"line": 156,
											"character": 3,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L156"
										}
									],
									"signatures": [
										{
											"id": 221,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/document/useEditDocument.ts",
													"line": 156,
													"character": 3,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/document/useEditDocument.ts#L156"
												}
											],
											"parameters": [
												{
													"id": 222,
													"name": "nextValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"packageName": "@sanity/sdk-react",
															"packagePath": "src/hooks/document/useEditDocument.ts",
															"qualifiedName": "Updater"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 218,
																"name": "TDocument",
																"package": "@sanity/sdk-react",
																"refersToTypeParameter": true
															}
														],
														"name": "Updater",
														"package": "@sanity/sdk-react"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@sanity/sdk",
															"packagePath": "src/document/applyDocumentActions.ts",
															"qualifiedName": "ActionsResult"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 218,
																"name": "TDocument",
																"package": "@sanity/sdk-react",
																"refersToTypeParameter": true
															}
														],
														"name": "ActionsResult",
														"package": "@sanity/sdk"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 172,
					"name": "useNavigateToStudioDocument",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L55"
						}
					],
					"signatures": [
						{
							"id": 173,
							"name": "useNavigateToStudioDocument",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Hook that provides a function to navigate to a given document in its parent Studio.\n\nUses the "
									},
									{
										"kind": "code",
										"text": "`projectId`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`dataset`"
									},
									{
										"kind": "text",
										"text": " properties of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "DocumentHandle",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										}
									},
									{
										"kind": "text",
										"text": " you provide to resolve the correct Studio.\nThis will only work if you have deployed a studio with a workspace with this "
									},
									{
										"kind": "code",
										"text": "`projectId`"
									},
									{
										"kind": "text",
										"text": " / "
									},
									{
										"kind": "code",
										"text": "`dataset`"
									},
									{
										"kind": "text",
										"text": " combination."
									}
								],
								"blockTags": [
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "If you write your own Document Handle to pass to this hook (as opposed to a Document Handle generated by another hook),\nit must include values for "
											},
											{
												"kind": "code",
												"text": "`documentId`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`documentType`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`projectId`"
											},
											{
												"kind": "text",
												"text": ", and "
											},
											{
												"kind": "code",
												"text": "`dataset`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object containing:\n- "
											},
											{
												"kind": "code",
												"text": "`navigateToStudioDocument`"
											},
											{
												"kind": "text",
												"text": " - Function that when called will navigate to the studio document\n- "
											},
											{
												"kind": "code",
												"text": "`isConnected`"
											},
											{
												"kind": "text",
												"text": " - Boolean indicating if connection to Dashboard is established"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {useNavigateToStudioDocument, type DocumentHandle} from '@sanity/sdk-react'\n\nfunction MyComponent({documentHandle}: {documentHandle: DocumentHandle}) {\n  const {navigateToStudioDocument, isConnected} = useNavigateToStudioDocument(documentHandle)\n\n  return (\n    <button onClick={navigateToStudioDocument} disabled={!isConnected}>\n      Navigate to Studio Document\n    </button>\n  )\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts",
									"line": 55,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/dashboard/useNavigateToStudioDocument.ts#L55"
								}
							],
							"parameters": [
								{
									"id": 174,
									"name": "documentHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document handle for the document to navigate to"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										},
										"name": "DocumentHandle",
										"package": "@sanity/sdk"
									}
								},
								{
									"id": 175,
									"name": "preferredStudioUrl",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The preferred studio url to navigate to if you have multiple\nstudios with the same projectId and dataset"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 167,
								"name": "NavigateToStudioResult",
								"package": "@sanity/sdk-react"
							}
						}
					]
				},
				{
					"id": 291,
					"name": "usePaginatedDocuments",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
							"line": 169,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L169"
						}
					],
					"signatures": [
						{
							"id": 292,
							"name": "usePaginatedDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves pages of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "DocumentHandle",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "DocumentHandle"
										}
									},
									{
										"kind": "text",
										"text": "s, narrowed by optional filters, text searches, and custom ordering,\nwith support for traditional paginated interfaces. The number of document handles returned per page is customizable,\nwhile page navigation is handled via the included navigation functions."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object containing the current page of document handles, the loading and pagination state, and navigation functions"
											}
										]
									},
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "- The returned document handles include projectId and dataset information from the current Sanity instance\n- This makes them ready to use with document operations and other document hooks\n- The hook automatically uses the correct Sanity instance based on the projectId and dataset in the options"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Basic usage",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst {\n  data,\n  isPending,\n  currentPage,\n  totalPages,\n  nextPage,\n  previousPage,\n  hasNextPage,\n  hasPreviousPage\n} = usePaginatedDocuments({\n  filter: '_type == \"post\"',\n  search: searchTerm,\n  pageSize: 10,\n  orderings: [{field: '_createdAt', direction: 'desc'}]\n})\n\nreturn (\n  <>\n    <table>\n      {data.map(doc => (\n        <MyTableRowComponent key={doc.documentId} doc={doc} />\n      ))}\n    </table>\n    {hasPreviousPage && <button onClick={previousPage}>Previous</button>}\n    {currentPage} / {totalPages}\n    {hasNextPage && <button onClick={nextPage}>Next</button>}\n  </>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
									"line": 169,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/paginatedDocuments/usePaginatedDocuments.ts#L169"
								}
							],
							"parameters": [
								{
									"id": 293,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configuration options for the paginated list"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 248,
										"name": "PaginatedDocumentsOptions",
										"package": "@sanity/sdk-react"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 262,
								"name": "PaginatedDocumentsResponse",
								"package": "@sanity/sdk-react"
							}
						}
					]
				},
				{
					"id": 294,
					"name": "usePreview",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
							"line": 74,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L74"
						}
					],
					"signatures": [
						{
							"id": 295,
							"name": "usePreview",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the preview values of a document (specified via a "
									},
									{
										"kind": "code",
										"text": "`DocumentHandle`"
									},
									{
										"kind": "text",
										"text": "),\nincluding the document’s "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`subtitle`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`media`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": ". These values are live and will update in realtime.\nTo reduce unnecessary network requests for resolving the preview values, an optional "
									},
									{
										"kind": "code",
										"text": "`ref`"
									},
									{
										"kind": "text",
										"text": " can be passed to the hook so that preview\nresolution will only occur if the "
									},
									{
										"kind": "code",
										"text": "`ref`"
									},
									{
										"kind": "text",
										"text": " is intersecting the current viewport."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The preview values for the given document and a boolean to indicate whether the resolution is pending"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Combining with useDocuments to render a collection of document previews",
										"content": [
											{
												"kind": "code",
												"text": "```\n// PreviewComponent.jsx\nexport default function PreviewComponent({ document }) {\n  const { data: { title, subtitle, media }, isPending } = usePreview({ document })\n  return (\n    <article style={{ opacity: isPending ? 0.5 : 1}}>\n      {media?.type === 'image-asset' ? <img src={media.url} alt='' /> : ''}\n      <h2>{title}</h2>\n      <p>{subtitle}</p>\n    </article>\n  )\n}\n\n// DocumentList.jsx\nconst { data } = useDocuments({ filter: '_type == \"movie\"' })\nreturn (\n  <div>\n    <h1>Movies</h1>\n    <ul>\n      {data.map(movie => (\n        <li key={movie._id}>\n          <Suspense fallback='Loading…'>\n            <PreviewComponent document={movie} />\n          </Suspense>\n        </li>\n      ))}\n    </ul>\n  </div>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/preview/usePreview.tsx",
									"line": 74,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/preview/usePreview.tsx#L74"
								}
							],
							"parameters": [
								{
									"id": 296,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document handle for the document you want to resolve preview values for, and an optional ref"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 297,
										"name": "UsePreviewOptions",
										"package": "@sanity/sdk-react"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 303,
								"name": "UsePreviewResults",
								"package": "@sanity/sdk-react"
							}
						}
					]
				},
				{
					"id": 321,
					"name": "useProject",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projects/useProject.ts",
							"line": 41,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projects/useProject.ts#L41"
						}
					],
					"signatures": [
						{
							"id": 322,
							"name": "useProject",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns metadata for a given project"
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Projects"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The metadata for the project"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n function ProjectMetadata({ projectId }: { projectId: string }) {\n   const project = useProject(projectId)\n\n   return (\n     <figure style={{ backgroundColor: project.metadata.color || 'lavender'}}>\n       <h1>{project.displayName}</h1>\n     </figure>\n   )\n }\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projects/useProject.ts",
									"line": 41,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projects/useProject.ts#L41"
								}
							],
							"parameters": [
								{
									"id": 323,
									"name": "projectHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "ProjectHandle"
										},
										"name": "ProjectHandle",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/client",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "SanityProject"
								},
								"name": "SanityProject",
								"package": "@sanity/client"
							}
						}
					]
				},
				{
					"id": 306,
					"name": "useProjection",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projection/useProjection.ts",
							"line": 89,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L89"
						}
					],
					"signatures": [
						{
							"id": 307,
							"name": "useProjection",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the projection values of a document (specified via a "
									},
									{
										"kind": "code",
										"text": "`DocumentHandle`"
									},
									{
										"kind": "text",
										"text": "),\nbased on the provided projection string. These values are live and will update in realtime.\nTo reduce unnecessary network requests for resolving the projection values, an optional "
									},
									{
										"kind": "code",
										"text": "`ref`"
									},
									{
										"kind": "text",
										"text": " can be passed to the hook so that projection\nresolution will only occur if the "
									},
									{
										"kind": "code",
										"text": "`ref`"
									},
									{
										"kind": "text",
										"text": " is intersecting the current viewport."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Documents"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The projection values for the given document and a boolean to indicate whether the resolution is pending"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Using a projection to render a preview of document",
										"content": [
											{
												"kind": "code",
												"text": "```\n// ProjectionComponent.jsx\nexport default function ProjectionComponent({ document }) {\n  const ref = useRef(null)\n  const { data: { title, coverImage, authors }, isPending } = useProjection({\n    ...document,\n    ref,\n    projection: `{\n      title,\n      'coverImage': cover.asset->url,\n      'authors': array::join(authors[]->{'name': firstName + ' ' + lastName + ' '}.name, ', ')\n    }`,\n  })\n\n  return (\n    <article ref={ref} style={{ opacity: isPending ? 0.5 : 1}}>\n      <h2>{title}</h2>\n      <img src={coverImage} alt={title} />\n      <p>{authors}</p>\n    </article>\n  )\n}\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Combining with useDocuments to render a collection with specific fields",
										"content": [
											{
												"kind": "code",
												"text": "```\n// DocumentList.jsx\nconst { data } = useDocuments({ filter: '_type == \"article\"' })\nreturn (\n  <div>\n    <h1>Books</h1>\n    <ul>\n      {data.map(book => (\n        <li key={book._id}>\n          <Suspense fallback='Loading…'>\n            <ProjectionComponent\n              document={book}\n            />\n          </Suspense>\n        </li>\n      ))}\n    </ul>\n  </div>\n)\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projection/useProjection.ts",
									"line": 89,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projection/useProjection.ts#L89"
								}
							],
							"typeParameters": [
								{
									"id": 308,
									"name": "TData",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 309,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document handle for the document you want to project values from, the projection string, and an optional ref"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 310,
										"name": "UseProjectionOptions",
										"package": "@sanity/sdk-react"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 317,
								"typeArguments": [
									{
										"type": "reference",
										"target": 308,
										"name": "TData",
										"package": "@sanity/sdk-react",
										"refersToTypeParameter": true
									}
								],
								"name": "UseProjectionResults",
								"package": "@sanity/sdk-react"
							}
						}
					]
				},
				{
					"id": 340,
					"name": "useProjects",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/projects/useProjects.ts",
							"line": 40,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projects/useProjects.ts#L40"
						}
					],
					"signatures": [
						{
							"id": 341,
							"name": "useProjects",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns metadata for each project you have access to."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Projects"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An array of metadata (minus the projects’ members) for each project"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst projects = useProjects()\n\nreturn (\n  <select>\n    {projects.map((project) => (\n      <option key={project.id}>{project.displayName}</option>\n    ))}\n  </select>\n)\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/projects/useProjects.ts",
									"line": 40,
									"character": 13,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/projects/useProjects.ts#L40"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 324,
									"name": "ProjectWithoutMembers",
									"package": "@sanity/sdk-react"
								}
							}
						}
					]
				},
				{
					"id": 342,
					"name": "useQuery",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/query/useQuery.ts",
							"line": 65,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/query/useQuery.ts#L65"
						}
					],
					"signatures": [
						{
							"id": 343,
							"name": "useQuery",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Executes GROQ queries against a Sanity dataset.\n\nThis hook provides a convenient way to fetch and subscribe to real-time updates\nfor your Sanity content. Changes made to the dataset's content will trigger\nautomatic updates."
									}
								],
								"blockTags": [
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "The returned "
											},
											{
												"kind": "code",
												"text": "`isPending`"
											},
											{
												"kind": "text",
												"text": " flag indicates when a React transition is in progress,\nwhich can be used to show loading states for query changes."
											}
										]
									},
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "GROQ"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Object containing the query result and a pending state flag"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Basic usage",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst {data, isPending} = useQuery<Movie[]>('*[_type == \"movie\"]')\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Using parameters",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n// With parameters\nconst {data} = useQuery<Movie>('*[_type == \"movie\" && _id == $id][0]', {\n  params: { id: 'movie-123' }\n})\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Query from a specific project/dataset",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n// Specify which project and dataset to query\nconst {data} = useQuery<Movie[]>('*[_type == \"movie\"]', {\n  projectId: 'abc123',\n  dataset: 'production'\n})\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "With a loading state for transitions",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\nconst {data, isPending} = useQuery<Movie[]>('*[_type == \"movie\"]')\nreturn (\n  <div>\n    {isPending && <div>Updating...</div>}\n    <ul>\n      {data.map(movie => <li key={movie._id}>{movie.title}</li>)}\n    </ul>\n  </div>\n)\n```"
											}
										]
									}
								],
								"modifierTags": [
									"@beta"
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/query/useQuery.ts",
									"line": 65,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/query/useQuery.ts#L65"
								}
							],
							"typeParameters": [
								{
									"id": 344,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 345,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "GROQ query string to execute"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 346,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optional configuration for the query, including projectId and dataset"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/query/queryStore.ts",
											"qualifiedName": "QueryOptions"
										},
										"name": "QueryOptions",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 347,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 348,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/query/useQuery.ts",
													"line": 65,
													"character": 69,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/query/useQuery.ts#L65"
												}
											],
											"type": {
												"type": "reference",
												"target": 344,
												"name": "T",
												"package": "@sanity/sdk-react",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 349,
											"name": "isPending",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react/src/hooks/query/useQuery.ts",
													"line": 65,
													"character": 78,
													"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/query/useQuery.ts#L65"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												348,
												349
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react/src/hooks/query/useQuery.ts",
											"line": 65,
											"character": 68,
											"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/query/useQuery.ts#L65"
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 164,
					"name": "useSanityInstance",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/context/useSanityInstance.ts",
							"line": 60,
							"character": 13,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/context/useSanityInstance.ts#L60"
						}
					],
					"signatures": [
						{
							"id": 165,
							"name": "useSanityInstance",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves the current Sanity instance or finds a matching instance from the hierarchy"
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Platform"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The current or matching Sanity instance"
											}
										]
									},
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "This hook accesses the nearest Sanity instance from the React context. When provided with\na configuration object, it traverses up the instance hierarchy to find the closest instance\nthat matches the specified configuration using shallow comparison of properties.\n\nThe hook must be used within a component wrapped by a "
											},
											{
												"kind": "code",
												"text": "`ResourceProvider`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`SanityApp`"
											},
											{
												"kind": "text",
												"text": ".\n\nUse this hook when you need to:\n- Access the current SanityInstance from context\n- Find a specific instance with matching project/dataset configuration\n- Access a parent instance with specific configuration values"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Get the current instance",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n// Get the current instance from context\nconst instance = useSanityInstance()\nconsole.log(instance.config.projectId)\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Find an instance with specific configuration",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n// Find an instance matching the given project and dataset\nconst instance = useSanityInstance({\n  projectId: 'abc123',\n  dataset: 'production'\n})\n\n// Use instance for API calls\nconst fetchDocument = (docId) => {\n  // Instance is guaranteed to have the matching config\n  return client.fetch(`*[_id == $id][0]`, { id: docId })\n}\n```"
											}
										]
									},
									{
										"tag": "@example",
										"name": "Match partial configuration",
										"content": [
											{
												"kind": "code",
												"text": "```tsx\n// Find an instance with specific auth configuration\nconst instance = useSanityInstance({\n  auth: { requireLogin: true }\n})\n```"
											}
										]
									},
									{
										"tag": "@throws",
										"content": [
											{
												"kind": "text",
												"text": "Error if no SanityInstance is found in context"
											}
										]
									},
									{
										"tag": "@throws",
										"content": [
											{
												"kind": "text",
												"text": "Error if no matching instance is found for the provided config"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/context/useSanityInstance.ts",
									"line": 60,
									"character": 33,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/context/useSanityInstance.ts#L60"
								}
							],
							"parameters": [
								{
									"id": 166,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optional configuration to match against when finding an instance"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/config/sanityConfig.ts",
											"qualifiedName": "SanityConfig"
										},
										"name": "SanityConfig",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@sanity/sdk",
									"packagePath": "src/store/createSanityInstance.ts",
									"qualifiedName": "SanityInstance"
								},
								"name": "SanityInstance",
								"package": "@sanity/sdk"
							}
						}
					]
				},
				{
					"id": 357,
					"name": "useUsers",
					"variant": "declaration",
					"kind": 64,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "packages/react/src/hooks/users/useUsers.ts",
							"line": 70,
							"character": 16,
							"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L70"
						}
					],
					"signatures": [
						{
							"id": 358,
							"name": "useUsers",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves the users for a given resource (either a project or an organization)."
									}
								],
								"blockTags": [
									{
										"tag": "@category",
										"content": [
											{
												"kind": "text",
												"text": "Users"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A list of users, a boolean indicating whether there are more users to fetch, and a function to load more users"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\nconst { data, hasMore, loadMore, isPending } = useUsers({\n  resourceType: 'organization',\n  organizationId: 'my-org-id',\n  batchSize: 10,\n})\n\nreturn (\n  <div>\n    {data.map(user => (\n      <figure key={user.sanityUserId}>\n        <img src={user.profile.imageUrl} alt='' />\n        <figcaption>{user.profile.displayName}</figcaption>\n        <address>{user.profile.email}</address>\n      </figure>\n    ))}\n    {hasMore && <button onClick={loadMore}>{isPending ? 'Loading...' : 'Load More'</button>}\n  </div>\n)\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react/src/hooks/users/useUsers.ts",
									"line": 70,
									"character": 16,
									"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/hooks/users/useUsers.ts#L70"
								}
							],
							"parameters": [
								{
									"id": 359,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@sanity/sdk",
											"packagePath": "src/users/types.ts",
											"qualifiedName": "GetUsersOptions"
										},
										"name": "GetUsersOptions",
										"package": "@sanity/sdk"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 350,
								"name": "UsersResult",
								"package": "@sanity/sdk-react"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						223,
						237,
						167,
						248,
						262,
						324,
						12,
						378,
						372,
						386,
						297,
						303,
						310,
						317,
						350
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						377,
						362
					]
				},
				{
					"title": "Variables",
					"children": [
						180
					]
				},
				{
					"title": "Functions",
					"children": [
						9,
						72,
						54,
						56,
						178,
						186,
						195,
						202,
						245,
						205,
						208,
						172,
						291,
						294,
						321,
						306,
						340,
						342,
						164,
						357
					]
				}
			],
			"categories": [
				{
					"title": "Components",
					"children": [
						9
					]
				},
				{
					"title": "Dashboard",
					"children": [
						56
					]
				},
				{
					"title": "Datasets",
					"children": [
						178
					]
				},
				{
					"title": "Documents",
					"children": [
						180,
						186,
						195,
						245,
						205,
						208,
						172,
						291,
						294,
						306
					]
				},
				{
					"title": "GROQ",
					"children": [
						342
					]
				},
				{
					"title": "Permissions",
					"children": [
						202
					]
				},
				{
					"title": "Platform",
					"children": [
						72,
						164
					]
				},
				{
					"title": "Projects",
					"children": [
						321,
						340
					]
				},
				{
					"title": "Types",
					"children": [
						223,
						237,
						167,
						248,
						262,
						324,
						12,
						297,
						303,
						310,
						317,
						350
					]
				},
				{
					"title": "Users",
					"children": [
						54,
						357
					]
				},
				{
					"title": "none",
					"children": [
						378,
						372,
						386,
						377,
						362
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react/src/_exports/sdk-react.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/sanity-io/sdk/blob/4af941ec6bec75b028a2da52c0d29a67229b0fb1/packages/react/src/_exports/sdk-react.ts#L1"
				}
			]
		}
	],
	"documents": [
		{
			"id": 1,
			"name": "Migration guide",
			"variant": "document",
			"kind": 8388608,
			"flags": {},
			"content": [
				{
					"kind": "text",
					"text": "## Migrating to @sanity/sdk-react@0.0.0-rc.4\n\n### Breaking Changes\n\n1. Removed Authentication Components and Hooks:\n\n   - Removed "
				},
				{
					"kind": "code",
					"text": "`<Login />`"
				},
				{
					"kind": "text",
					"text": " component - authentication now redirects to sanity.io/login\n   - Removed "
				},
				{
					"kind": "code",
					"text": "`<LoginLayout />`"
				},
				{
					"kind": "text",
					"text": " component and its related props\n   - Removed "
				},
				{
					"kind": "code",
					"text": "`useLoginUrls`"
				},
				{
					"kind": "text",
					"text": " hook - replaced with "
				},
				{
					"kind": "code",
					"text": "`useLoginUrl`"
				},
				{
					"kind": "text",
					"text": " hook that returns a single login URL\n   - "
				},
				{
					"kind": "code",
					"text": "`<AuthBoundary />`"
				},
				{
					"kind": "text",
					"text": " now automatically redirects to sanity.io/login when logged out\n   - "
				},
				{
					"kind": "code",
					"text": "`<LoginCallback />`"
				},
				{
					"kind": "text",
					"text": " now renders null during the callback process\n\n2. Authentication Flow Changes:\n\n   - Authentication now uses a centralized login page at sanity.io/login\n   - Token refresh interval is now consistently set to 12 hours for all environments\n\n3. Renamed hooks:\n\n   - "
				},
				{
					"kind": "code",
					"text": "`useInfiniteList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocuments`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`usePaginatedList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`usePaginatedDocuments`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`usePermissions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocumentPermissions`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`useApplyActions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useApplyDocumentActions`"
				},
				{
					"kind": "text",
					"text": " (and the "
				},
				{
					"kind": "code",
					"text": "`applyActions`"
				},
				{
					"kind": "text",
					"text": " function is now "
				},
				{
					"kind": "code",
					"text": "`applyDocumentActions`"
				},
				{
					"kind": "text",
					"text": ")\n   - related types have been renamed; this is documented in full below\n\n4. Re-exported core SDK: The "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk`"
				},
				{
					"kind": "text",
					"text": " package is now fully re-exported from "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk-react`"
				},
				{
					"kind": "text",
					"text": ". This means you only need to install and import from "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk-react`"
				},
				{
					"kind": "text",
					"text": " to access both React-specific hooks/components and core SDK functions/types. You should update your imports accordingly and remove "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk`"
				},
				{
					"kind": "text",
					"text": " as a direct dependency if it's no longer needed.\n\n5. Improved component hierarchy with "
				},
				{
					"kind": "code",
					"text": "`<SanityApp />`"
				},
				{
					"kind": "text",
					"text": ", "
				},
				{
					"kind": "code",
					"text": "`<SDKProvider />`"
				},
				{
					"kind": "text",
					"text": ", and "
				},
				{
					"kind": "code",
					"text": "`<ResourceProvider />`"
				},
				{
					"kind": "text",
					"text": "\n6. Simplified document references with explicit "
				},
				{
					"kind": "code",
					"text": "`projectId`"
				},
				{
					"kind": "text",
					"text": " + "
				},
				{
					"kind": "code",
					"text": "`dataset`"
				},
				{
					"kind": "text",
					"text": " fields\n7. Standardized property names across the SDK\n8. Unified hook interfaces with the handle pattern\n\n### Provider Components\n\nWe've updated our component hierarchy to provide better flexibility and control over resource management:\n\n- "
				},
				{
					"kind": "code",
					"text": "`<SanityApp />`"
				},
				{
					"kind": "text",
					"text": ": The recommended top-level component for most applications\n- "
				},
				{
					"kind": "code",
					"text": "`<SDKProvider />`"
				},
				{
					"kind": "text",
					"text": ": An intermediate component with authentication boundaries (for advanced use cases)\n- "
				},
				{
					"kind": "code",
					"text": "`<ResourceProvider />`"
				},
				{
					"kind": "text",
					"text": ": The foundational component for individual resource configurations\n\n#### Using "
				},
				{
					"kind": "code",
					"text": "`<SanityApp />`"
				},
				{
					"kind": "text",
					"text": "\n\nFor most applications, particularly dashboard applications, we recommend using the "
				},
				{
					"kind": "code",
					"text": "`<SanityApp />`"
				},
				{
					"kind": "text",
					"text": " component:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// Single project configuration\n<SanityApp\n  config={{projectId: 'abc1235', dataset: 'production'}}\n  fallback={<>Loading…</>}\n>\n  <App />\n</SanityApp>\n\n// Multiple project configuration\n<SanityApp\n  config={[\n    {projectId: 'abc1235', dataset: 'production'},\n    {projectId: 'xyz1235', dataset: 'production'},\n  ]}\n  fallback={<>Loading…</>}\n>\n  <App />\n</SanityApp>\n```"
				},
				{
					"kind": "text",
					"text": "\n\nThe "
				},
				{
					"kind": "code",
					"text": "`config`"
				},
				{
					"kind": "text",
					"text": " prop replaces the previous "
				},
				{
					"kind": "code",
					"text": "`sanityConfigs`"
				},
				{
					"kind": "text",
					"text": " prop and supports both single and multiple configurations. When providing multiple configurations, the first one in the array will be the default instance.\n\n#### For Advanced Use Cases\n\nFor more complex applications that need finer control, you can use "
				},
				{
					"kind": "code",
					"text": "`<SDKProvider />`"
				},
				{
					"kind": "text",
					"text": " or "
				},
				{
					"kind": "code",
					"text": "`<ResourceProvider />`"
				},
				{
					"kind": "text",
					"text": " directly:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// Using SDKProvider directly\n<SDKProvider\n  config={[\n    {projectId: 'abc12345', dataset: 'production'},\n    {projectId: 'xyz12345', dataset: 'production'},\n  ]}\n  fallback={<>Loading…</>}\n>\n  <App />\n</SDKProvider>\n\n// Using ResourceProvider for full control\n<ResourceProvider projectId=\"xyz12345\" dataset=\"production\">\n  <ResourceProvider projectId=\"abc12345\" dataset=\"production\">\n    <App />\n  </ResourceProvider>\n</ResourceProvider>\n```"
				},
				{
					"kind": "text",
					"text": "\n\n### Document Handle Pattern\n\nWe've introduced a consistent \"handle\" pattern across the SDK for working with documents and configuration. This replaces the previous "
				},
				{
					"kind": "code",
					"text": "`resourceId`"
				},
				{
					"kind": "text",
					"text": " concept with more explicit fields.\n\n#### Document References\n\n**Before:**\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\nconst doc: DocumentHandle<Author> = {\n  _type: 'author',\n  _id: 'db06bc9e-4608-465a-9551-a10cef478037',\n  resourceId: 'document:ppsg7ml5.test:db06bc9e-4608-465a-9551-a10cef478037',\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n**After:**\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\nconst doc: DocumentHandle<Author> = {\n  documentType: 'author', // Previously _type\n  documentId: 'db06bc9e-4608-465a-9551-a10cef478037', // Previously _id\n  projectId: 'ppsg7ml5', // From resourceId\n  dataset: 'test', // From resourceId\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n#### Handle Interfaces\n\nThe SDK now uses three main handle types:\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\n// For project-level operations\ninterface ProjectHandle {\n  projectId?: string\n}\n\n// For dataset-level operations\ninterface DatasetHandle extends ProjectHandle {\n  dataset?: string\n}\n\n// For document operations\ninterface DocumentHandle extends DatasetHandle {\n  documentId: string\n  documentType: string\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n### Hook Updates: Renaming\n\nVarious hooks and associated types have been renamed for clarity. Their signatures remain the same, aside from the use of document handles, which is covered in the next section.\n\n- "
				},
				{
					"kind": "code",
					"text": "`useInfiniteList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocuments`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`InfiniteListOptions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`DocumentsOptions`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`InfiniteList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`DocumentsResponse`"
				},
				{
					"kind": "text",
					"text": "\n- "
				},
				{
					"kind": "code",
					"text": "`usePaginatedList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`usePaginatedDocuments`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`PaginatedListOptions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`PaginatedDocumentsOptions`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`PaginatedList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`PaginatedDocumentsResponse`"
				},
				{
					"kind": "text",
					"text": "\n- "
				},
				{
					"kind": "code",
					"text": "`useApplyActions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useApplyDocumentActions`"
				},
				{
					"kind": "text",
					"text": "\n- function "
				},
				{
					"kind": "code",
					"text": "`applyActions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`applyDocumentActions`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`ApplyActionsOptions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`ApplyDocumentActionsOptions`"
				},
				{
					"kind": "text",
					"text": "\n- "
				},
				{
					"kind": "code",
					"text": "`usePermissions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocumentPermissions`"
				},
				{
					"kind": "text",
					"text": "\n- type "
				},
				{
					"kind": "code",
					"text": "`PermissionsResult`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`DocumentPermissionsResult`"
				},
				{
					"kind": "text",
					"text": "\n\n### Hook Updates: Document Handles\n\nMany hooks have been updated to use the handle pattern consistently.\n\n#### Document Hooks\n\n**Before:**\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\nfunction Preview({document}: {document: DocumentHandle}) {\n  const {data} = useProjection({document, projection: '{title}'})\n  const {data: preview} = usePreview({document, ref: someRef})\n  return // ...\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n**After:**\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\ninterface PreviewProps extends DocumentHandle {\n  showExtra?: boolean\n}\n\nfunction Preview({showExtra, ...docHandle}: PreviewProps) {\n  const ref = useRef<HTMLElement>(null)\n  const {data} = useProjection({...docHandle, ref, projection: '{title}'})\n  const {data: preview} = usePreview({...docHandle, ref})\n  return // ...\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n#### Query and List Hooks\n\nAll query-based hooks now accept "
				},
				{
					"kind": "code",
					"text": "`DatasetHandle`"
				},
				{
					"kind": "text",
					"text": " for configuration:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// useQuery with optional project/dataset override\nconst {data} = useQuery('*[_type == $type][0...10]', {\n  params: {type: 'author'},\n  projectId: 'abc12345', // Optional - inherits from ResourceProvider\n  dataset: 'production', // Optional - inherits from ResourceProvider\n})\n\n// List hooks with configuration\nconst {data: documents} = useDocuments({\n  filter: '_type == \"product\"',\n  projectId: 'xyz12345', // Optional\n  dataset: 'staging', // Optional\n  batchSize: 20,\n})\n\n// Returned documents include full context\ndocuments.map((docHandle) => (\n  <DocumentPreview\n    key={docHandle.documentId}\n    {...docHandle} // Includes projectId, dataset, etc.\n  />\n))\n```"
				},
				{
					"kind": "text",
					"text": "\n\n#### Project and Dataset Hooks\n\nProject and dataset hooks now use the handle pattern:\n\n"
				},
				{
					"kind": "code",
					"text": "```ts\n// Before\nconst project = useProject('abc12345')\n\n// After\nconst project = useProject({projectId: 'abc12345'})\nconst datasets = useDatasets({projectId: 'abc12345'})\n```"
				},
				{
					"kind": "text",
					"text": "\n\n> 🔄 **Coming Soon**: We're continuing to refine our APIs. Future releases will include:\n>\n> - Further unification of hook signatures\n> - More consistent parameter naming\n> - Additional handle pattern improvements\n> - Enhanced TypeScript types and validations\n\n### Breaking Changes Summary\n\n1. Authentication Changes:\n\n   - Removed "
				},
				{
					"kind": "code",
					"text": "`<Login />`"
				},
				{
					"kind": "text",
					"text": ", "
				},
				{
					"kind": "code",
					"text": "`<LoginLayout />`"
				},
				{
					"kind": "text",
					"text": ", and "
				},
				{
					"kind": "code",
					"text": "`useLoginUrls`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`<AuthBoundary />`"
				},
				{
					"kind": "text",
					"text": " and "
				},
				{
					"kind": "code",
					"text": "`<LoginCallback />`"
				},
				{
					"kind": "text",
					"text": " behavior changes\n   - Centralized login at sanity.io/login\n   - 12-hour token refresh interval\n\n2. Component Changes:\n\n   - "
				},
				{
					"kind": "code",
					"text": "`<SanityApp />`"
				},
				{
					"kind": "text",
					"text": " now uses "
				},
				{
					"kind": "code",
					"text": "`config`"
				},
				{
					"kind": "text",
					"text": " instead of "
				},
				{
					"kind": "code",
					"text": "`sanityConfigs`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`<SDKProvider />`"
				},
				{
					"kind": "text",
					"text": " now uses "
				},
				{
					"kind": "code",
					"text": "`config`"
				},
				{
					"kind": "text",
					"text": " prop for multiple configurations\n   - "
				},
				{
					"kind": "code",
					"text": "`<ResourceProvider />`"
				},
				{
					"kind": "text",
					"text": " provides granular control for single configuration\n   - "
				},
				{
					"kind": "code",
					"text": "`<SanityProvider />`"
				},
				{
					"kind": "text",
					"text": " removed\n\n3. Hook Renames:\n\n   - "
				},
				{
					"kind": "code",
					"text": "`useInfiniteList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocuments`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`usePaginatedList`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`usePaginatedDocuments`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`usePermissions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useDocumentPermissions`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`useApplyActions`"
				},
				{
					"kind": "text",
					"text": " is now "
				},
				{
					"kind": "code",
					"text": "`useApplyDocumentActions`"
				},
				{
					"kind": "text",
					"text": " (and the "
				},
				{
					"kind": "code",
					"text": "`applyActions`"
				},
				{
					"kind": "text",
					"text": " function is now "
				},
				{
					"kind": "code",
					"text": "`applyDocumentActions`"
				},
				{
					"kind": "text",
					"text": ")\n   - related types have been renamed (see related section above)\n\n4. "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk`"
				},
				{
					"kind": "text",
					"text": " Re-exported: All exports from "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk`"
				},
				{
					"kind": "text",
					"text": " are now available directly from "
				},
				{
					"kind": "code",
					"text": "`@sanity/sdk-react`"
				},
				{
					"kind": "text",
					"text": ".\n\n5. Property Renames:\n\n   - "
				},
				{
					"kind": "code",
					"text": "`_type`"
				},
				{
					"kind": "text",
					"text": " → "
				},
				{
					"kind": "code",
					"text": "`documentType`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`_id`"
				},
				{
					"kind": "text",
					"text": " → "
				},
				{
					"kind": "code",
					"text": "`documentId`"
				},
				{
					"kind": "text",
					"text": "\n   - "
				},
				{
					"kind": "code",
					"text": "`results`"
				},
				{
					"kind": "text",
					"text": " → "
				},
				{
					"kind": "code",
					"text": "`data`"
				},
				{
					"kind": "text",
					"text": " (in hook returns)\n   - Removed "
				},
				{
					"kind": "code",
					"text": "`resourceId`"
				},
				{
					"kind": "text",
					"text": " concept\n\n6. Interface Updates:\n   - All document hooks use "
				},
				{
					"kind": "code",
					"text": "`DocumentHandle`"
				}
			],
			"frontmatter": {}
		},
		{
			"id": 2,
			"name": "Introducing Document Handles",
			"variant": "document",
			"kind": 8388608,
			"flags": {},
			"content": [
				{
					"kind": "text",
					"text": "# Introducing Document Handles\n\nDocument Handles ("
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " DocumentHandle see their type definition here"
				},
				{
					"kind": "text",
					"text": ") are a new concept introduced by the Sanity App SDK, and are important to understand when working with many of the SDK’s React hooks. In this guide, we’ll describe what Document Handles are, why they’re useful, and how to work with them.\n\n## What is a Document Handle?\n\nIn short, a Document Handle is a ‘stub’ of a document — a small piece of metadata, encoded in a JavaScript object, that acts as a reference to a complete document in your dataset(s).\n\nIt looks like this:\n\n"
				},
				{
					"kind": "code",
					"text": "```JavaScript\nconst myDocumentHandle = {\n  documentId: 'my-document-id',\n  documentType: 'article'\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nA Document Handle may also contain optional information about the project and dataset it originates from; in that case, it would look like this:\n\n"
				},
				{
					"kind": "code",
					"text": "```JavaScript\nconst myDocumentHandle = {\n  documentId: 'my-document-id',\n  documentType: 'author',\n  dataset: 'dataset-name',\n  projectId: 'my-project-id'\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nTherefore, for a document in a given dataset that looks (in part) like this:\n\n"
				},
				{
					"kind": "code",
					"text": "```JSON\n{\n  \"_id\": \"123456-abcdef\",\n  \"_type\": \"book\",\n  \"title\": \"Into the Cool\",\n  \"publisher\": \"The University of Chicago Press\",\n  \"pages\": 378,\n  \"…\": \"…\"\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n…the corresponding Document Handle would look like this:\n\n"
				},
				{
					"kind": "code",
					"text": "```JavaScript\n{\n  documentId: \"123456-abcdef\",\n  documentType: \"book\"\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n## Why are Document Handles used?\n\nHooks like "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocuments",
					"target": 245
				},
				{
					"kind": "text",
					"text": " and "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " usePaginatedDocuments",
					"target": 291
				},
				{
					"kind": "text",
					"text": " can return potentially large numbers of documents matching your specified parameters. If these hooks were to return every matching document in its entirety, this could end up being a potentially performance heavy operation, which could thus slow down your application and result in a poor user experience. Additionally, you may not need each returned document in its entirety to begin with — perhaps, for example, you just want to render a document preview, or one or two arbitrary fields of a document, or to simply get a count of documents matching your parameters.\n\nThis is where the concept of Document Handles comes in. By returning a small amount of metadata for each document instead of unfurling every returned document, hooks like "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocuments",
					"target": 245
				},
				{
					"kind": "text",
					"text": " can respond as fast as possible, allowing your application to remain snappy.\n\nOf course, unless you’re just looking to get a count of documents matching the parameters you pass to these hooks, Document Handles aren't incredibly useful on their own. This is by design — they’re only meant to serve as references to documents which can then be consumed by more specialized hooks, such as "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useProjection",
					"target": 306
				},
				{
					"kind": "text",
					"text": ", "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocument",
					"target": 186
				},
				{
					"kind": "text",
					"text": ", and many more hooks provided by the SDK. These specialized hooks are designed to consume document handles and emit only the document content you request, which also delivers huge performance benefits. Other hooks, such as "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocumentEvent",
					"target": 195
				},
				{
					"kind": "text",
					"text": " and "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocumentPermissions",
					"target": 202
				},
				{
					"kind": "text",
					"text": " have no need to know the contents of a document — instead, they use the provided Document Handle to reference a document and retrieve information pertaining to that document.\n\nIn short, Document Handles promote deferring the retrieval of document contents until such time as those contents are actually needed by your application.\n\n## Using your own Document Handles\n\nYou’re not limited to using Document Handles returned by hooks like "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocuments",
					"target": 245
				},
				{
					"kind": "text",
					"text": " — if it suits your use case (for example: if you know the document ID and type of the document you want to reference), you can certainly write and use your own Document Handles.\n\nFor example:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\nimport {useDocumentSyncStatus, type DocumentHandle} from '@sanity/sdk-react'\n\nconst myDocumentHandle: DocumentHandle = {\n  documentId: 'my-document-id',\n  documentType: 'book',\n}\n\nconst documentSynced = useDocumentSyncStatus(myDocumentHandle)\n```"
				},
				{
					"kind": "text",
					"text": "\n\n## A quick example\n\nLet’s say you’d like to get all of the documents of type "
				},
				{
					"kind": "code",
					"text": "`'author'`"
				},
				{
					"kind": "text",
					"text": " from a dataset. In your Sanity application, you could use the "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useDocuments",
					"target": 245
				},
				{
					"kind": "text",
					"text": " hook to do that:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\nimport {useDocuments} from '@sanity/sdk'\n\nexport function AuthorList() {\n  const {data: authors} = useDocuments({filter: '_type: \"author\"'})\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nAt this point, the "
				},
				{
					"kind": "code",
					"text": "`authors`"
				},
				{
					"kind": "text",
					"text": " variable contains an array of Document Handles, which, because we’re filtering for only the "
				},
				{
					"kind": "code",
					"text": "`author`"
				},
				{
					"kind": "text",
					"text": " content type, will look like this:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n{ documentId: 'the-document-id', documentType: 'author' }\n```"
				},
				{
					"kind": "text",
					"text": "\n\nWith this information, we could render the number of authors in the dataset — for example:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\nimport {useDocuments} from '@sanity/sdk'\n\nexport function AuthorList() {\n  const {data: authors} = useDocuments({filter: '_type: \"author\"'})\n\n  return <p>There are currently {authors.length} authors in our dataset.</p>\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nIf we wanted to instead render content from each of these documents — for example, the author’s name — we’d then need to provide each Document Handle to a different hook — for example, "
				},
				{
					"kind": "inline-tag",
					"tag": "@link",
					"text": " useProjection",
					"target": 306
				},
				{
					"kind": "text",
					"text": ". Note how the document handle is [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) in the arguments to the "
				},
				{
					"kind": "code",
					"text": "`useProjection`"
				},
				{
					"kind": "text",
					"text": " hook below:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\nimport {useProjection, type DocumentHandle, type UseProjectionResults} from '@sanity/sdk'\n\ninterface NameProjection {\n  name: string\n}\n\n// The AuthorDetails component will accept a Document Handle for its `document` prop\nexport function AuthorDetails({document}: {document: DocumentHandle}) {\n  const {data}: UseProjectionResults<NameProjection> = useProjection({\n    ...document,\n    projection: '{ name }',\n  })\n\n  return <p>The author's name is {data.name}</p>\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nWith this in place, we can then use our "
				},
				{
					"kind": "code",
					"text": "`AuthorDetails`"
				},
				{
					"kind": "text",
					"text": " component with our previously created "
				},
				{
					"kind": "code",
					"text": "`AuthorList`"
				},
				{
					"kind": "text",
					"text": " component, and pass along the Document Handles to each instance of the "
				},
				{
					"kind": "code",
					"text": "`AuthorDetails`"
				},
				{
					"kind": "text",
					"text": " component:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\nimport {useDocuments} from '@sanity/sdk'\n\nimport AuthorDetails from './AuthorDetails.tsx'\n\nexport function AuthorList() {\n  const { data: authors } = useDocuments({ filter: '_type: \"author\"'})\n\n  return (\n    <>\n      <p>There are {authors.length} authors in our dataset! Here they are:</p>\n      <ul>\n        {authors.map(author => (\n          <li key={author.documentId}>\n            <AuthorDetails document={author} />\n          </li>\n        )}\n      </ul>\n    </>\n  )\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nWe’ve now both retrieved a list of Document Handles, and used each of them in a dedicated component with a hook that consumes Document Handles. No matter how many authors there are in our dataset, nor how many fields might exist on our author type, this will keep our application performing as fast as possible by separating the concerns of retrieving author type documents (or rather, Document Handles) and retrieving data from those documents."
				}
			],
			"frontmatter": {}
		},
		{
			"id": 3,
			"name": "Integrating UI Components",
			"variant": "document",
			"kind": 8388608,
			"flags": {},
			"content": [
				{
					"kind": "text",
					"text": "# Integrating UI Components\n\nThe Sanity App SDK gives you complete freedom to craft your application’s design. Whether your preferred styling solution is Sanity UI, Tailwind, vanilla CSS, or something else entirely, the SDK‘s headless approach allows you to style your app with the tools your team knows best, while benefiting from powerful React hooks that unlock Sanity platform capabilities.\n\n## Example: Sanity UI\n\nFirst, begin by installing Sanity UI:\n\n"
				},
				{
					"kind": "code",
					"text": "```shell\nnpm install @sanity/ui styled-components\n```"
				},
				{
					"kind": "text",
					"text": "\n\nThen, in your custom application’s "
				},
				{
					"kind": "code",
					"text": "`src/App.tsx`"
				},
				{
					"kind": "text",
					"text": ", instantiate Sanity UI’s ThemeProvider as usual (within the "
				},
				{
					"kind": "code",
					"text": "`SanityApp`"
				},
				{
					"kind": "text",
					"text": " component):\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// App.tsx\nimport {type SanityConfig} from '@sanity/sdk'\nimport {SanityApp} from '@sanity/sdk-react'\n\n// Sanity UI\nimport {ThemeProvider} from '@sanity/ui'\nimport {buildTheme} from '@sanity/ui/theme'\n\nimport {ExampleComponent} from './ExampleComponent'\nimport './App.css'\n\n// Build the Sanity UI theme\nconst theme = buildTheme()\n\nexport function App() {\n  // apps can access many different projects or other sources of data\n  const sanityConfigs: SanityConfig[] = [\n    {\n      projectId: 'project-id',\n      dataset: 'dataset-name',\n    },\n  ]\n\n  return (\n    <div className=\"app-container\">\n      <SanityApp sanityConfigs={sanityConfigs} fallback={<div>Loading...</div>}>\n        <ThemeProvider theme={theme}>\n          {/* add your own components here! */}\n          <ExampleComponent />\n        </ThemeProvider>\n      </SanityApp>\n    </div>\n  )\n}\n\nexport default App\n```"
				},
				{
					"kind": "text",
					"text": "\n\nYou can now use Sanity UI as expected within your custom application."
				}
			],
			"frontmatter": {}
		},
		{
			"id": 4,
			"name": "Working with Suspense",
			"variant": "document",
			"kind": 8388608,
			"flags": {},
			"content": [
				{
					"kind": "text",
					"text": "# Working with Suspense\n\nOur hooks are optimized for use with [React Suspense](https://react.dev/reference/react/Suspense). This allows you to write code in a synchronous fashion, as if the data you’re requesting from our hooks is available immediately.\n\nFor example, note in the example below how we use the value returned by the "
				},
				{
					"kind": "code",
					"text": "`useProjects`"
				},
				{
					"kind": "text",
					"text": " hook without checking if the request for it is in flight or resolved:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// ProjectsList.tsx\nimport {useProjects} from '@sanity/sdk-react'\n\nimport ProjectListItem from './ProjectListItem'\n\nexport function ProjectsList() {\n  const projects = useProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>\n          <ProjectListItem projectId={project.id} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n## Rendering fallback content\n\nBecause our hooks suspend during data fetching, you can render fallback content until data fetching is resolved using Suspense boundaries.\n\nFor example, given the above Projects List component (which uses the "
				},
				{
					"kind": "code",
					"text": "`useProjects`"
				},
				{
					"kind": "text",
					"text": " hook), we can wrap instances of this component with a Suspense boundary as follows:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// ProjectsPanel.tsx\nimport {Suspense} from 'react'\n\nimport ProjectsList from './ProjectsList'\nimport LoadingSkeleton from './LoadingSkeleton'\n\nexport function ProjectsPanel() {\n  return (\n    <Suspense fallback={<LoadingSkeleton />}>\n      <ProjectsList />\n    </Suspense>\n  )\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\nAdditionally, if the "
				},
				{
					"kind": "code",
					"text": "`ProjectListItem`"
				},
				{
					"kind": "text",
					"text": " component made use of the "
				},
				{
					"kind": "code",
					"text": "`useProject`"
				},
				{
					"kind": "text",
					"text": " hook, we could also wrap its component instances in Suspense boundaries within the "
				},
				{
					"kind": "code",
					"text": "`ProjectsList`"
				},
				{
					"kind": "text",
					"text": " component:\n\n"
				},
				{
					"kind": "code",
					"text": "```tsx\n// ProjectsList.tsx\nimport Suspense from 'react'\nimport {useProjects} from '@sanity/sdk-react'\n\nimport ProjectListItem from './ProjectListItem'\n\nexport function ProjectsList() {\n  const projects = useProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>\n          <Suspense fallback={'Loading project…'}>\n            <ProjectListItem projectId={project.id} />\n          </Suspense>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```"
				},
				{
					"kind": "text",
					"text": "\n\n## Notes\n\n- The SanityApp component rendered by all Sanity custom apps comes with a root level Suspense boundary baked in. You can (and should!) pass a fallback component to its "
				},
				{
					"kind": "code",
					"text": "`fallback`"
				},
				{
					"kind": "text",
					"text": " prop to use as fallback content at the root level of your app. You may wish to wrap other components which use our hooks in a Suspense boundary. To learn more about how Suspense works, [refer to the React Suspense docs](https://react.dev/reference/react/Suspense).\n- Our hooks also make use of ["
				},
				{
					"kind": "code",
					"text": "`useTransition`"
				},
				{
					"kind": "text",
					"text": "](https://react.dev/reference/react/useTransition) internally in order to keep UI that has already been rendered responsive and visible during data fetching."
				}
			],
			"frontmatter": {}
		}
	],
	"childrenIncludingDocuments": [
		1,
		2,
		3,
		4,
		5
	],
	"groups": [
		{
			"title": "Documents",
			"children": [
				1,
				2,
				3,
				4
			]
		},
		{
			"title": "Modules",
			"children": [
				5
			]
		}
	],
	"packageName": "@sanity/sdk-react",
	"readme": [
		{
			"kind": "text",
			"text": "<p align=\"center\">\n  <a href=\"https://sanity.io\">\n    <img src=\"https://cdn.sanity.io/images/3do82whm/next/1dfce9dde7a62ccaa8e8377254a1e919f6c07ad3-128x128.svg\" />\n  </a>\n  <h1 align=\"center\">Sanity SDK - React</h1>\n</p>\n\nReact hooks for creating Sanity applications.\n\n## 💻 Installation\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm i @sanity/sdk-react @sanity/sdk\n```"
		},
		{
			"kind": "text",
			"text": "\n\n> 💡 Looking to build a Sanity application? Check out the [Quick Start](#quick-start) section.\n\n## 📚 SDK Documentation\n\nSee the [SDK Documentation](https://sdk-docs.sanity.dev) for more information.\n\n## 🚀 Quick Start\n\nHere's how to implement your Sanity application:\n\n1. Create a new React TypeScript project using the Sanity template\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\npnpx sanity@latest init --template app-quickstart\ncd my-content-os-app\n```"
		},
		{
			"kind": "text",
			"text": "\n\n2. Install dependencies\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm i\n```"
		},
		{
			"kind": "text",
			"text": "\n\n3. Run the app\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm run dev\n```"
		},
		{
			"kind": "text",
			"text": "\n\n4. Open the App in Sanity Dashboard with your organization ID\n\n"
		},
		{
			"kind": "code",
			"text": "```\nhttps://core.sanity.io/<your-organization-id>?dev=http://localhost:3333\n```"
		},
		{
			"kind": "text",
			"text": "\n\n5. Update the "
		},
		{
			"kind": "code",
			"text": "`src/App.tsx`"
		},
		{
			"kind": "text",
			"text": " file with your Sanity project and dataset\n\n"
		},
		{
			"kind": "code",
			"text": "```tsx\n// src/App.tsx\nimport {createSanityInstance} from '@sanity/sdk'\n...\n\nconst sanityConfig: SanityConfigs = [\n  {\n    projectId: 'abc123',\n    dataset: 'production',\n  },\n]\n\n...\n```"
		},
		{
			"kind": "text",
			"text": "\n\n## License\n\nMIT © Sanity.io"
		}
	],
	"symbolIdMap": {
		"5": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/_exports/sdk-react.ts",
			"qualifiedName": ""
		},
		"9": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityApp"
		},
		"10": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityApp"
		},
		"11": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "__0"
		},
		"12": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityAppProps"
		},
		"13": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityAppProps.config"
		},
		"14": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityAppProps.sanityConfigs"
		},
		"15": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityAppProps.children"
		},
		"16": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/components/SanityApp.tsx",
			"qualifiedName": "SanityAppProps.fallback"
		},
		"54": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/auth/useCurrentUser.tsx",
			"qualifiedName": "useCurrentUser"
		},
		"55": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/auth/useCurrentUser.tsx",
			"qualifiedName": "useCurrentUser"
		},
		"56": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/auth/useDashboardOrganizationId.tsx",
			"qualifiedName": "useDashboardOrganizationId"
		},
		"57": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/auth/useDashboardOrganizationId.tsx",
			"qualifiedName": "useDashboardOrganizationId"
		},
		"72": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/client/useClient.ts",
			"qualifiedName": "useClient"
		},
		"73": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createStateSourceHook.tsx",
			"qualifiedName": "useClient"
		},
		"74": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createStateSourceHook.tsx",
			"qualifiedName": "params"
		},
		"164": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/context/useSanityInstance.ts",
			"qualifiedName": "useSanityInstance"
		},
		"165": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/context/useSanityInstance.ts",
			"qualifiedName": "useSanityInstance"
		},
		"166": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/context/useSanityInstance.ts",
			"qualifiedName": "config"
		},
		"167": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "NavigateToStudioResult"
		},
		"168": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "NavigateToStudioResult.navigateToStudioDocument"
		},
		"169": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "__type"
		},
		"170": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "__type"
		},
		"171": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "NavigateToStudioResult.isConnected"
		},
		"172": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "useNavigateToStudioDocument"
		},
		"173": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "useNavigateToStudioDocument"
		},
		"174": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "documentHandle"
		},
		"175": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/dashboard/useNavigateToStudioDocument.ts",
			"qualifiedName": "preferredStudioUrl"
		},
		"178": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/datasets/useDatasets.ts",
			"qualifiedName": "useDatasets"
		},
		"179": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/datasets/useDatasets.ts",
			"qualifiedName": "useDatasets"
		},
		"180": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useApplyDocumentActions.ts",
			"qualifiedName": "useApplyDocumentActions"
		},
		"181": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createCallbackHook.tsx",
			"qualifiedName": "__type"
		},
		"182": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createCallbackHook.tsx",
			"qualifiedName": "__type"
		},
		"183": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createCallbackHook.tsx",
			"qualifiedName": "__type"
		},
		"184": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createCallbackHook.tsx",
			"qualifiedName": "__type"
		},
		"185": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/helpers/createCallbackHook.tsx",
			"qualifiedName": "params"
		},
		"186": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "useDocument"
		},
		"187": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "useDocument"
		},
		"188": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "TDocument"
		},
		"189": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "TPath"
		},
		"190": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "doc"
		},
		"191": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "path"
		},
		"192": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "useDocument"
		},
		"193": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "TDocument"
		},
		"194": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocument.ts",
			"qualifiedName": "doc"
		},
		"195": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "useDocumentEvent"
		},
		"196": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "useDocumentEvent"
		},
		"197": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "handler"
		},
		"198": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "__type"
		},
		"199": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "__type"
		},
		"200": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "documentEvent"
		},
		"201": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentEvent.ts",
			"qualifiedName": "dataset"
		},
		"202": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentPermissions.ts",
			"qualifiedName": "useDocumentPermissions"
		},
		"203": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentPermissions.ts",
			"qualifiedName": "useDocumentPermissions"
		},
		"204": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentPermissions.ts",
			"qualifiedName": "actionOrActions"
		},
		"205": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentSyncStatus.ts",
			"qualifiedName": "useDocumentSyncStatus"
		},
		"206": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentSyncStatus.ts",
			"qualifiedName": "useDocumentSyncStatus"
		},
		"207": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useDocumentSyncStatus.ts",
			"qualifiedName": "doc"
		},
		"208": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "useEditDocument"
		},
		"209": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "useEditDocument"
		},
		"210": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "TDocument"
		},
		"211": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "TPath"
		},
		"212": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "docHandle"
		},
		"213": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "path"
		},
		"214": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "__type"
		},
		"215": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "__type"
		},
		"216": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "nextValue"
		},
		"217": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "useEditDocument"
		},
		"218": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "TDocument"
		},
		"219": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "docHandle"
		},
		"220": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "__type"
		},
		"221": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "__type"
		},
		"222": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/document/useEditDocument.ts",
			"qualifiedName": "nextValue"
		},
		"223": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsOptions"
		},
		"224": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsOptions.filter"
		},
		"225": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsOptions.batchSize"
		},
		"226": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsOptions.orderings"
		},
		"227": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsOptions.search"
		},
		"228": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/query/queryStore.ts",
			"qualifiedName": "QueryOptions.params"
		},
		"229": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "next"
		},
		"230": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "useCdn"
		},
		"231": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "perspective"
		},
		"232": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "tag"
		},
		"233": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "cache"
		},
		"234": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "cacheMode"
		},
		"235": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DatasetHandle.dataset"
		},
		"236": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "ProjectHandle.projectId"
		},
		"237": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse"
		},
		"238": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse.data"
		},
		"239": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse.hasMore"
		},
		"240": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse.count"
		},
		"241": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse.isPending"
		},
		"242": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "DocumentsResponse.loadMore"
		},
		"243": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "__type"
		},
		"244": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "__type"
		},
		"245": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "useDocuments"
		},
		"246": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "useDocuments"
		},
		"247": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/documents/useDocuments.ts",
			"qualifiedName": "__0"
		},
		"248": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsOptions"
		},
		"249": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsOptions.filter"
		},
		"250": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsOptions.pageSize"
		},
		"251": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsOptions.orderings"
		},
		"252": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsOptions.search"
		},
		"253": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/query/queryStore.ts",
			"qualifiedName": "QueryOptions.params"
		},
		"254": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "next"
		},
		"255": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "useCdn"
		},
		"256": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "perspective"
		},
		"257": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "tag"
		},
		"258": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "cache"
		},
		"259": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "cacheMode"
		},
		"260": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DatasetHandle.dataset"
		},
		"261": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "ProjectHandle.projectId"
		},
		"262": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse"
		},
		"263": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.data"
		},
		"264": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.isPending"
		},
		"265": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.pageSize"
		},
		"266": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.currentPage"
		},
		"267": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.totalPages"
		},
		"268": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.startIndex"
		},
		"269": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.endIndex"
		},
		"270": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.count"
		},
		"271": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.firstPage"
		},
		"272": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"273": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"274": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.hasFirstPage"
		},
		"275": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.previousPage"
		},
		"276": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"277": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"278": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.hasPreviousPage"
		},
		"279": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.nextPage"
		},
		"280": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"281": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"282": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.hasNextPage"
		},
		"283": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.lastPage"
		},
		"284": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"285": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"286": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.hasLastPage"
		},
		"287": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "PaginatedDocumentsResponse.goToPage"
		},
		"288": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"289": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__type"
		},
		"290": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "pageNumber"
		},
		"291": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "usePaginatedDocuments"
		},
		"292": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "usePaginatedDocuments"
		},
		"293": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/paginatedDocuments/usePaginatedDocuments.ts",
			"qualifiedName": "__0"
		},
		"294": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "usePreview"
		},
		"295": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "usePreview"
		},
		"296": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "__0"
		},
		"297": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "UsePreviewOptions"
		},
		"298": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "UsePreviewOptions.ref"
		},
		"299": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DocumentHandle.documentId"
		},
		"300": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DocumentTypeHandle.documentType"
		},
		"301": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DatasetHandle.dataset"
		},
		"302": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "ProjectHandle.projectId"
		},
		"303": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "UsePreviewResults"
		},
		"304": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "UsePreviewResults.data"
		},
		"305": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/preview/usePreview.tsx",
			"qualifiedName": "UsePreviewResults.isPending"
		},
		"306": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "useProjection"
		},
		"307": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "useProjection"
		},
		"308": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "TData"
		},
		"309": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "__0"
		},
		"310": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionOptions"
		},
		"311": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionOptions.ref"
		},
		"312": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionOptions.projection"
		},
		"313": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DocumentHandle.documentId"
		},
		"314": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DocumentTypeHandle.documentType"
		},
		"315": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "DatasetHandle.dataset"
		},
		"316": {
			"packageName": "@sanity/sdk",
			"packagePath": "src/config/sanityConfig.ts",
			"qualifiedName": "ProjectHandle.projectId"
		},
		"317": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionResults"
		},
		"318": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionResults.data"
		},
		"319": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionResults.isPending"
		},
		"320": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projection/useProjection.ts",
			"qualifiedName": "UseProjectionResults.TData"
		},
		"321": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProject.ts",
			"qualifiedName": "useProject"
		},
		"322": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProject.ts",
			"qualifiedName": "useProject"
		},
		"323": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProject.ts",
			"qualifiedName": "projectHandle"
		},
		"324": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProjects.ts",
			"qualifiedName": "ProjectWithoutMembers"
		},
		"325": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "id"
		},
		"326": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "displayName"
		},
		"327": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "studioHost"
		},
		"328": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "organizationId"
		},
		"329": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "isBlocked"
		},
		"330": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "isDisabled"
		},
		"331": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "isDisabledByUser"
		},
		"332": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "createdAt"
		},
		"333": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "pendingInvites"
		},
		"334": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "maxRetentionDays"
		},
		"335": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "metadata"
		},
		"336": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type"
		},
		"337": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.cliInitializedAt"
		},
		"338": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.color"
		},
		"339": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.externalStudioHost"
		},
		"340": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProjects.ts",
			"qualifiedName": "useProjects"
		},
		"341": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/projects/useProjects.ts",
			"qualifiedName": "useProjects"
		},
		"342": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "useQuery"
		},
		"343": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "useQuery"
		},
		"344": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "T"
		},
		"345": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "query"
		},
		"346": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "options"
		},
		"347": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "__type"
		},
		"348": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "__type.data"
		},
		"349": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/query/useQuery.ts",
			"qualifiedName": "__type.isPending"
		},
		"350": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "UsersResult"
		},
		"351": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "UsersResult.data"
		},
		"352": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "UsersResult.hasMore"
		},
		"353": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "UsersResult.isPending"
		},
		"354": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "UsersResult.loadMore"
		},
		"355": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "__type"
		},
		"356": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "__type"
		},
		"357": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "useUsers"
		},
		"358": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "useUsers"
		},
		"359": {
			"packageName": "@sanity/sdk-react",
			"packagePath": "src/hooks/users/useUsers.ts",
			"qualifiedName": "options"
		},
		"362": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "DatasetsResponse"
		},
		"363": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type"
		},
		"364": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.name"
		},
		"365": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.aclMode"
		},
		"366": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.createdAt"
		},
		"367": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.createdByUserId"
		},
		"368": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.addonFor"
		},
		"369": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.datasetProfile"
		},
		"370": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.features"
		},
		"371": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "__type.tags"
		},
		"372": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "SanityProjectMember"
		},
		"373": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "SanityProjectMember.id"
		},
		"374": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "SanityProjectMember.role"
		},
		"375": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "SanityProjectMember.isRobot"
		},
		"376": {
			"packageName": "@sanity/client",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "SanityProjectMember.isCurrentUser"
		},
		"377": {
			"packageName": "@sanity/comlink",
			"packagePath": "dist/index.d.ts",
			"qualifiedName": "Status"
		},
		"378": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument"
		},
		"379": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument._id"
		},
		"380": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument._type"
		},
		"381": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument._createdAt"
		},
		"382": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument._updatedAt"
		},
		"383": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument._rev"
		},
		"384": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SanityDocument.__index"
		},
		"386": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SortOrderingItem"
		},
		"387": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SortOrderingItem.field"
		},
		"388": {
			"packageName": "@sanity/types",
			"packagePath": "lib/index.d.mts",
			"qualifiedName": "SortOrderingItem.direction"
		}
	},
	"files": {
		"entries": {
			"1": "guides/0-Migration-Guide.md",
			"2": "guides/Document-Handles.md",
			"3": "guides/Integrating-UI-Components.md",
			"4": "guides/Working-with-Suspense.md",
			"5": "src/_exports/sdk-react.ts"
		},
		"reflections": {
			"1": 1,
			"2": 2,
			"3": 3,
			"4": 4,
			"5": 5
		}
	}
}
